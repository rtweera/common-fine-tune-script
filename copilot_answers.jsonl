{"question": "I'm exploring the services available in the marketplace and notice there are many listed. What is the primary goal of this marketplace, and what are the main ways I can quickly find a specific service among potentially hundreds?", "answer": "\nThe primary goal of the Choreo marketplace is to provide a platform where users can discover, explore, and consume a variety of APIs and services to enhance their applications and workflows. \n\nTo efficiently search and find specific services among the listed options in the Choreo marketplace, users can utilize the search functionality and filters available on the platform. By using keywords, categories, tags, or other relevant criteria, users can narrow down their search and easily find the desired APIs or services. Additionally, users can explore curated collections, popular APIs, and trending services to discover new and relevant options. \n\nIf you need more information about a specific API or service, feel free to ask!"}
{"question": "When I browse the marketplace, I see services listed with version numbers like 'v1' or 'v2'. How does the platform handle versioning for these services, and if I build a new service that depends on another service (say, 'Service A v1'), what happens automatically if 'Service A' later releases a new minor version (like v1.3 after I connected to v1.2)?", "answer": ""}
{"question": "I'm looking for a specific service provided by another team in my organization, but there are many services listed in the marketplace. What are the most effective ways I can narrow down the list to quickly find the service I need?", "answer": "\nTo quickly find a specific service provided by another team in the Choreo API Marketplace, you can use the search functionality and filters available in the UI. Here are some effective methods for narrowing down the list of services:\n\n1. **Search by API Name:** Use the search bar to directly search for the specific service by its name. This will help you quickly locate the service provided by another team.\n\n2. **Filter by API Type:** If you know the type of API (REST, GraphQL, Async) that the specific service belongs to, you can use the filter option to narrow down the list based on API type.\n\n3. **Filter by API Version:** If you are looking for a specific version of the service, you can use the version filter to refine your search results.\n\n4. **Filter by Tags or Categories:** Some services may be tagged or categorized based on their functionality or domain. You can use these tags or categories to filter out irrelevant services and focus on the ones provided by another team.\n\nBy utilizing these methods, you can efficiently navigate through the Choreo API Marketplace and quickly find the specific service provided by another team within the organization."}
{"question": "When I connect my component to a service I found in the marketplace, how does the marketplace handle different versions of that service? If the service publisher releases minor updates (like v1.1 to v1.2), will my component automatically use the new version, or do I need to update the connection manually?", "answer": ""}
{"question": "I'm a developer looking for a specific service in the internal Marketplace within my organization that was developed by another team. I know part of the service name and that it's intended for internal use across different projects. With potentially hundreds of services listed, what's the most efficient way to find this service, and what kind of key information can I expect to see about it immediately, even before diving into all the details?", "answer": ""}
{"question": "My team has developed a service, let's call it `OrderProcessing`, which depends on another service published in the Marketplace, `InventoryCheck`. Currently, `InventoryCheck` is available in the Marketplace as version `v1`. If the team maintaining `InventoryCheck` deploys a new minor version, say `v1.5`, and later a new major version `v2.0`, how will these updates appear in the Marketplace from my perspective as a consumer of the `v1` version, and what happens automatically to the connection between my `OrderProcessing` service and `InventoryCheck`?", "answer": ""}
{"question": "I've just deployed a new service component with an endpoint. I expected it to appear in the Marketplace so other teams in my organization can find and reuse it. How does a service get added to the Marketplace, and what kind of basic information can other developers find about it there right after deployment?", "answer": ""}
{"question": "My team has a service listed in the Marketplace that's being actively used by other components in our organization. We're planning to deploy an update. How does the Marketplace handle service versioning, especially when we deploy a new minor version or potentially a new major version later? Will components that are already connected to our service automatically use the latest update?", "answer": ""}
{"question": "I'm just getting started with deploying my application components. I see options for different environments, like 'development' and 'production'. How does the platform ensure that the exact same application code is running in both environments, even though they might need to connect to different databases or external services? What's the fundamental strategy for handling these differences?", "answer": ""}
{"question": "We have a service component, `UserAuthService`, currently running version `v1.5` in our production environment. We've developed a new feature in `v1.6` and successfully tested it in the development environment. How do I safely update the production environment to `v1.6` using the platform's CI/CD process, ensuring minimal disruption to users and correctly applying the production-specific configurations?", "answer": ""}
{"question": "As someone learning about deploying applications, I'm curious about how platforms handle moving code from development to production. What is the primary strategy Choreo uses for building and deploying components across different environments, and what's the main advantage of this approach?", "answer": ""}
{"question": "I have a service component in Choreo that needs to connect to different external services (like a database or a third-party API) depending on whether it's running in the 'development' environment or the 'production' environment. For example, the database URL and credentials will be different. How does Choreo handle these environment-specific details during the build and deployment process without requiring me to change my source code for each environment?", "answer": ""}
{"question": "I'm new to this platform and want to understand the basic ways I can start a build process for my component. What are the primary methods available to initiate a build?", "answer": "In Choreo, you can initiate a build process for a component through several primary methods. Here are the steps you can follow for different types of components:\n\n1. **Manual Task**:\n   - Navigate to **Build** in the left menu.\n   - Click on **Build** in the **Builds** pane to open the **Commits** pane.\n   - Select the latest commit and click **Build** to trigger the build process. The build progress will be displayed in the **Build Logs** pane.\n   - Once complete, the build status will be shown in the **Builds** pane as **Success**.  \n   [Learn more about building a manual task here](https://wso2.com/choreo/docs/develop-components/develop-integrations/develop-a-manual-task/#step-2-build-the-manual-task).\n\n2. **Scheduled Task**:\n   - Similar to the manual task, go to **Build** in the left menu.\n   - Click on **Build** in the **Builds** pane, select the latest commit, and click **Build**. The build progress can be monitored in the **Build Logs** pane.\n   - The build status will be updated in the **Builds** pane when complete.  \n   [Find details about building a scheduled task here](https://wso2.com/choreo/docs/develop-components/develop-integrations/develop-a-scheduled-task/#step-2-build-the-scheduled-task).\n\n3. **Single-Page Web Application**:\n   - Access the **Build** section from the left navigation menu.\n   - Click on **Build** in the **Builds** pane, select the latest commit, and initiate the build.\n   - The build process will be visible in the **Build Logs** pane, and the final status will be reflected in the **Builds** pane.  \n   [More information on building web applications can be found here](https://wso2.com/choreo/docs/develop-components/develop-web-applications/build-and-deploy-a-single-page-web-application/#build-your-web-application).\n\n4. **API Proxy**:\n   - After creating the API proxy, it initially builds automatically. To manually trigger a build later:\n     - Click on the component from the project home page.\n     - Go to **Build** in the left menu and click **Build Latest**.\n     - Monitor the build progress in the **Build Details** pane, and the status will update upon completion.  \n   [Check the process for building an API proxy here](https://wso2.com/choreo/docs/develop-components/develop-proxy/develop-an-api-proxy-from-a-github-repository-source/#step-2-build).\n\n5. **General CI/CD Method**:\n   - You can also use the **Build Latest** option on the **Build** page to trigger a build from the latest commit.\n   - Admin and DevOps users have the ability to trigger builds using specific tags from the Git repository, though this should be used cautiously.  \n   [For general CI/CD insights, visit this link](https://wso2.com/choreo/docs/choreo-concepts/ci-cd/#build).\n\nThese methods allow for flexible initiation of builds depending on the type of component you are working with in Choreo."}
{"question": "My team is using a Ballerina service component and we have automatic builds enabled. We recently made some changes to the configurable values defined within the Ballerina code, pushed the commit, and the automatic build failed. Why might this happen specifically for a Ballerina component, and how does this relate to the platform's build strategy?", "answer": ""}
{"question": "I'm new to deploying applications and just linked my code repository to a component in Choreo. I see options for different environments like 'development' and 'production'. Could you explain the typical flow for getting my application built and deployed, first to a testing environment and then potentially to a live one? How does Choreo handle the different settings needed for each environment?", "answer": ""}
{"question": "Our team already has an established CI pipeline that produces standardized Docker images, and we prefer to use that. We want to use Choreo primarily for the deployment and management of these pre-built images across our environments. We also have a strict requirement for zero-downtime deployments when we push updates, and our environments (dev, staging, prod) have distinct secrets and configurations that must be kept separate. How can we integrate our existing CI process with Choreo for CD, handle environment-specific settings, and achieve zero downtime?", "answer": ""}
{"question": "I'm trying to understand how my application components move through different stages like development, staging, and production in this platform. What is the core strategy used for this movement, and how does the platform handle settings like API keys or database connection strings that need to be different in each environment?", "answer": ""}
{"question": "I've set up my component to automatically build whenever I push a commit to my main branch, and I've also enabled automatic deployment to the 'Development' environment. Can you describe the sequence of events that happens from the moment I push a code change until that change is running in 'Development'? Also, how do I then get that specific, built version of my component into a 'Production' environment, and what role do environment-specific configurations play in that promotion?", "answer": ""}
{"question": "I have deployed a scheduled task component that runs daily. How can I check if the task ran successfully yesterday and view its execution history?", "answer": "I'm sorry, but I can only assist with questions related to traffic, usage, errors, or latency metrics. If you have any questions in those areas, feel free to ask!"}
{"question": "I have a manual task component that recently failed during its execution. What information is available through the task execution monitoring feature that could help me understand *why* it failed and troubleshoot the issue?", "answer": "The task execution monitoring feature in Choreo provides several key pieces of information that help diagnose and troubleshoot failures in manual task components:\n\n1. **Total Executions**: You can view the total number of executions that have occurred within the last 30 days. This gives you an overview of how frequently the task is being executed.\n\n2. **Execution History**: This includes details about both currently active executions and those that have already completed. For each execution, you can see:\n   - Unique execution ID\n   - The time the execution was triggered\n   - Relevant revision information\n\n3. **Detailed Execution Logs**: By clicking on a specific execution, you can access detailed logs associated with that execution. This is crucial for troubleshooting as it provides insights into what occurred during the execution.\n\n4. **Recent Activity Snapshot**: A quick snapshot of recent activity allows for easy monitoring and analysis of workflows.\n\nThis information enhances transparency and supports your capabilities in troubleshooting and managing executions effectively. \n\nFor further details, you can refer to the [Choreo documentation on task execution monitoring](https://wso2.com/choreo/docs/choreo-concepts/ci-cd/#task-execution) and the [documentation on developing a manual task](https://wso2.com/choreo/docs/develop-components/develop-integrations/develop-a-manual-task/#step-7-monitor-executions)."}
{"question": "When a new version of my service is deployed or promoted, how does the system ensure that users don't experience any interruption or downtime during the update process?", "answer": "Choreo ensures seamless transitions and prevents downtime when deploying or promoting a new version of a service through several key mechanisms:\n\n1. **Zero-Downtime Deployments**: Choreo utilizes rolling updates, which allow new builds to be deployed incrementally. This means that traffic is gradually switched from the current build to the new build, ensuring that there is no interruption in service availability.\n\n2. **Health Checks**: Before traffic is redirected to a new build, Choreo performs health checks on the new version. This step is crucial because it ensures that only healthy and operational versions of the service receive live traffic. If a new build fails the health check, it will not be promoted, thereby preventing any potential issues that could affect users.\n\n3. **Continuous Integration and Continuous Deployment (CI/CD)**: Choreo adopts a CI/CD approach, allowing for efficient deployment of applications and services across different environments. This strategy includes building the application once and promoting it across various environments, ensuring that tests can be conducted in non-production settings before going live.\n\n4. **Configuration Management**: Choreo manages configurations and secrets at the environment level, separating them from the source code. This means that while the core application code remains unchanged, environment-specific configurations can be adjusted as needed without disrupting the deployment process.\n\nBy integrating these practices, Choreo minimizes potential downtime and enhances the reliability of software deployments. For further details, you can refer to the documentation on [Zero-Downtime Deployments](https://wso2.com/choreo/docs/choreo-concepts/ci-cd/#zero-downtime-deployments) and the general [CI/CD](https://wso2.com/choreo/docs/choreo-concepts/ci-cd/) processes in Choreo."}
{"question": "What specific action should I, as a developer, take to leverage the zero-downtime deployment capability effectively and prevent potentially bad deployments from impacting users?", "answer": "To effectively use Choreo's zero-downtime deployment feature and prevent bad deployments from impacting users, developers can follow these key practices:\n\n1. **Rolling Updates**: Choreo employs rolling updates to ensure that there is zero downtime during the deployment process. This means that new builds are gradually rolled out while the current version remains active until the new version is confirmed to be healthy.\n\n2. **Health Checks**: Before switching traffic from the current build to the new build, it's crucial to configure and implement health checks for your components. These checks verify that the new version is functioning as expected. If the health checks fail, Choreo will not switch traffic to the new build, preventing potentially problematic deployments from affecting users.\n\n3. **Monitoring and Observability**: Utilize observability features to monitor the performance of your components post-deployment. This includes setting up alerts for anomalies and being vigilant about any issues that may arise after the deployment, allowing for quick responses to any emerging problems.\n\n4. **Immutable Deployments**: Once a deployment occurs, the configurations become immutable. This means that any further changes will trigger a new deployment rather than altering the existing one. This approach can help maintain stability and ensure that only fully tested and verified versions are serving users.\n\nBy implementing these practices, developers can minimize the risks associated with new deployments and ensure a smooth user experience.\n\nFor more detailed information about zero-downtime deployments in Choreo, you can refer to the documentation here: [Choreo Zero-Downtime Deployments](https://wso2.com/choreo/docs/choreo-concepts/ci-cd/#zero-downtime-deployments)."}
{"question": "I'm developing several microservices for a new application, and they need to talk to each other as well as some external third-party services. I'm concerned about managing connection details like API keys, database credentials, and endpoint URLs, especially when deploying to different environments (like development, staging, and production). I want to avoid hardcoding these sensitive details directly into my service code or configuration files. How does the platform help me manage these connections securely and flexibly across environments? What's the fundamental concept that allows this separation?", "answer": ""}
{"question": "My team is working on a project with multiple components. We have a requirement where *all* components in this project need to access a shared logging service configured with specific credentials. Separately, one specific microservice in the project needs to integrate with a legacy system using a unique endpoint and API key that no other service uses. Also, two different components in the project consume the same internal API exposed by another service within the project, and this internal API uses OAuth security. How should I set up Connections for these different scenarios? What are the two main types of Connections available, and when is it appropriate to use each one, particularly considering the OAuth case?", "answer": ""}
{"question": "I'm new to building applications on this platform and am trying to figure out the best way for multiple services within my project to connect to a shared external database. I've seen options for creating different types of connections. What is the fundamental difference between a 'Project Connection' and a 'Component Connection', and when should I typically use a 'Project Connection' like in my database scenario?", "answer": ""}
{"question": "I'm implementing a microservice within a project that needs to consume another internal service that is exposed via the platform's Marketplace and uses OAuth for security. If I create a Project Connection to this internal service, the documentation mentions that the OAuth application will be shared across the project. How does this sharing work from a development perspective, specifically how does my microservice code get the necessary credentials like the client ID and secret to make calls through this Project Connection?", "answer": ""}
{"question": "I'm developing several different microservices within the same project that all need to interact with a shared external database. I've configured the database credentials (hostname, username, password) in the platform. How should I set up the connections for these microservices to access the database efficiently and maintain consistency, and why is that approach recommended?", "answer": ""}
{"question": "I understand that when my service component needs to connect to another service or external resource, I use a \"Connection\" and map parameters to environment variables. How does the platform ensure that my running component actually *receives* the correct parameter values via these environment variables, and what's the main advantage of this runtime injection mechanism compared to hardcoding or using static configuration files?", "answer": ""}
{"question": "I'm new to understanding cloud-native platforms like this one. Could you explain the main difference between the \"Control Plane\" and the \"Data Plane\"? What kind of activities or functions does each part of the architecture typically handle?", "answer": "In cloud-native architectures, particularly in Choreo's framework, there are two primary components: the **Control Plane** and the **Data Plane**. Each serves distinct functions and handles different activities throughout the application lifecycle.\n\n### Control Plane\nThe Control Plane is responsible for managing and orchestrating the overall environment in which applications are developed and deployed. Key functions include:\n\n- **Administration**: Manages organizations, users, and projects.\n- **Application Development**: Oversees the entire journey of application creation, from initial development to deployment.\n- **Governance**: Enforces policies and governance measures to ensure compliance and security.\n- **Observability**: Provides insights and monitoring capabilities for the applications and services in the data plane.\n\nThe Control Plane acts as a centralized management component, allowing various user personas (like CIOs, architects, developers, etc.) to coordinate resources efficiently.\n\n### Data Plane\nThe Data Plane is where user applications are actually deployed and run, based on the configurations defined in the Control Plane. Its primary activities include:\n\n- **Application Hosting**: Supports various types of applications, including services, web applications, APIs, and integrations.\n- **Traffic Management**: Handles all traffic related to the execution of user applications, ensuring that data remains within its boundaries for privacy and security.\n- **Environment Types**:\n  - **Cloud Data Plane**: A multi-tenant infrastructure model for deploying applications in a shared yet secure environment.\n  - **Private Data Plane**: A dedicated infrastructure for a single organization, providing enhanced privacy and control.\n\nAll user data and application traffic are contained within the Data Plane, ensuring strict data security and compliance with regulatory standards.\n\n### Summary of Differences\n| Feature               | Control Plane                                          | Data Plane                                      |\n|----------------------|-------------------------------------------------------|------------------------------------------------|\n| Purpose               | Management and orchestration of resources             | Execution and hosting of applications           |\n| Activities            | Administering users, projects, governance, observability | Running applications, managing traffic, data containment |\n| User Interaction      | Centralized interface for management                   | Environment for application runtime             |\n| Types                 | N/A                                                   | Cloud Data Plane, Private Data Plane            |\n\nFor more detailed information on the Control Plane and Data Plane in Choreo, you can refer to the documentation here: [Choreo Data Planes](https://wso2.com/choreo/docs/choreo-concepts/data-planes/)."}
{"question": "My company has very strict data residency and privacy requirements, meaning our application data and logs must remain within our own data centers or specific cloud provider regions under our control, not in a shared SaaS environment. How does the platform's architecture accommodate this, and what are the implications for network connectivity between our infrastructure and the platform's management layer?", "answer": ""}
{"question": "I'm trying to understand the fundamental difference between the two main types of data planes used for deploying applications and services. What is the core distinction, and for what kinds of requirements or organizations would choosing a dedicated, private data plane infrastructure be more suitable compared to a shared, multi-tenanted cloud option?", "answer": ""}
{"question": "I'm considering setting up a private data plane for my organization. What are the key technical infrastructure components I would be responsible for providing and managing? Also, how does a private data plane specifically handle configurations, secrets, and observability data differently from a standard cloud setup, particularly concerning security and data privacy?", "answer": ""}
{"question": "My organization is looking into setting up a dedicated environment for deploying our applications to meet strict data privacy and compliance requirements. I understand this involves a \"private data plane\". What is the fundamental difference between a cloud data plane and a private data plane in this context, and what are the absolute minimum infrastructure components we would need to provide on our end to run a private data plane?", "answer": ""}
{"question": "We are configuring the network environment for our private data plane. It appears that this dedicated data plane needs to interact with an external control plane for management purposes. From the perspective of our private data plane network, what is the typical direction of communication with the control plane (inbound or outbound), and what specific network configuration is required if we have a corporate firewall that blocks most outbound traffic?", "answer": ""}
{"question": "My organization has strict data privacy and compliance requirements. We are considering using a private data plane. How does the design of the observability architecture in the private data plane specifically help us meet these requirements?", "answer": "Choreo's observability architecture within its private data plane is meticulously designed to uphold strict data privacy and compliance requirements. Here are the key features that contribute to this:\n\n1. **Data Storage at Source**: Logs and observability data are retained within the private data plane, enhancing security and ensuring compliance with data privacy regulations. This localized storage simplifies access and minimizes the risk of unauthorized data exposure.\n\n2. **Direct Interaction**: The Choreo Console allows users to interact directly with APIs in the data plane through their browsers. This direct communication reduces potential complexities in data routing, ensuring a safer flow of information and limiting exposure to external vulnerabilities.\n\n3. **Reduced Data Exposure Points**: By fetching data directly from the data plane's APIs, the architecture minimizes the number of potential data transfer points. This approach effectively decreases the chances of data interception or exposure during transit.\n\n4. **Regulatory Compliance**: The architecture is designed to support data locality, which aligns with global regulatory standards such as GDPR and CCPA. By keeping data within its original environment, it ensures that data handling practices meet stringent compliance requirements.\n\n5. **Performance and Real-Time Insights**: The architecture facilitates quicker data retrieval through direct browser-to-data-plane interactions, providing users with immediate insights and improving overall performance.\n\n6. **User Transparency and Control**: Users are given clear visibility into their data's location and access methods, along with granular control over who can access their data. This transparency is crucial for organizations needing to adhere to privacy and compliance mandates.\n\nIn summary, Choreo's private data plane observability architecture is built around key principles of data privacy, security, and compliance, making it suitable for organizations with strict data handling requirements.\n\nFor more details, you can refer to the documentation here: [Private Data Planes](https://wso2.com/choreo/docs/choreo-concepts/data-planes/#private-data-planes)."}
{"question": "If observability data like logs and metrics are stored within the private data plane, how do users access and view this information through the Choreo Console? What are the technical implications and benefits of this access method?", "answer": "Users can access and view observability data, such as logs and metrics, stored within the private data plane (PDP) through the Choreo Console. The process involves several steps and has significant technical implications and benefits.\n\n### Accessing Observability Data in Choreo Console\n\n1. **Navigate to the Component**:\n   - In the Choreo Console, select your component from the **Components Listing**. This action opens the **Overview** page of the component.\n\n2. **Access Runtime Logs**:\n   - In the left navigation menu, click on **Runtime** under the **DevOps** section. Here, you will find options to view runtime logs, providing insight into the operational status of your deployed components.\n\n3. **Log Analysis**:\n   - If direct viewing of logs for your PDP is not supported, you can utilize your cloud vendor's log analyzing solutions as a workaround to access the runtime logs of your components.\n\n### Technical Implications and Benefits\n\n- **Data Privacy and Compliance**:\n  - The architecture of the private data plane is designed to retain logs and observability data within the data plane itself. This ensures data privacy and compliance with regulations such as GDPR and CCPA by keeping data in its original environment.\n\n- **Direct Interaction**:\n  - The Choreo Console allows direct interaction with APIs in the data plane. This reduces potential data routing complexities, ensuring a more secure and efficient flow of information.\n\n- **Reduced Exposure Points**:\n  - Fetching data directly from the data plane’s APIs minimizes the number of data transfer points, decreasing the chances of data exposure or interception.\n\n- **Improved Performance**:\n  - Direct communication between the user's browser and the data plane results in faster data retrieval and immediate insights into logs and metrics.\n\n- **User Transparency and Control**:\n  - Users are provided with a clear view of their data's location and access methods, along with granular control over data access, enhancing operational transparency.\n\n### Observability Dashboard Features\n\nThe Choreo observability dashboard also provides:\n- Visualization of service performance, including throughput and latencies over time.\n- Side-by-side comparison of metrics for efficient diagnosis.\n- A centralized view for logs to facilitate troubleshooting and analysis.\n\nFor more detailed information on viewing logs and metrics within the private data plane, you can refer to the following documents:\n- [View Private Data Plane (PDP) Logs](https://wso2.com/choreo/docs/monitoring-and-insights/logs/view-pdp-logs/)\n- [Observability Overview](https://wso2.com/choreo/docs/monitoring-and-insights/observability-overview/)"}
{"question": "My organization handles sensitive customer data and has strict compliance requirements regarding data locality and privacy. I'm considering using a private data plane for my applications. How does this deployment model specifically address these concerns compared to running applications on a shared, multi-tenant infrastructure? Where exactly does my user data and related operational data reside?", "answer": ""}
{"question": "I'm a DevOps engineer tasked with setting up a private data plane. I need to understand the technical security mechanisms in place for traffic management and the specific network connectivity required to allow the private data plane to function correctly while maintaining security. How is incoming and internal traffic secured, and what network connections are necessary between the private data plane and the control plane?", "answer": ""}
{"question": "My organization is considering using a private data plane. What are the different ways we can choose to manage this data plane in terms of who handles the infrastructure and the platform components?", "answer": "In Choreo, there are several options for managing a private data plane (PDP) concerning infrastructure and platform components. The management models offered by Choreo facilitate different levels of involvement from WSO2 and the customer.\n\n### Management Models for Private Data Planes:\n\n1. **WSO2 Fully Managed Model**:\n   - **Infrastructure and PDP in WSO2 Subscription**:\n     - This model is supported on Azure, AWS, and GCP.\n     - WSO2 is responsible for most tasks, including network management, infrastructure provisioning, and component deployment through Helm. \n     - Customers are informed and consulted but primarily focus on application creation and management.\n     - [Learn more here](https://wso2.com/choreo/docs/references/private-data-plane-management-models/#wso2-fully-managed-infrastructure-and-pdp-in-wso2-subscription-model).\n\n   - **Infrastructure and PDP in Customer Subscription**:\n     - Similar to the previous model, but here the customer holds the subscription.\n     - Responsibilities are shared between WSO2 and the customer, especially regarding firewall rules, network management, and component management.\n     - [Learn more here](https://wso2.com/choreo/docs/references/private-data-plane-management-models/#wso2-fully-managed-infrastructure-and-pdp-in-customer-subscription-model).\n\n2. **Customer Self-Managed Model**:\n   - In this model, WSO2 provides the installation script and updates, while the customer is primarily responsible for all aspects.\n   - Infrastructure provisioning, monitoring, and application management are handled entirely by the customer.\n   - This model allows for maximum control over the data plane but requires more resources and expertise from the customer.\n   - [Learn more here](https://wso2.com/choreo/docs/references/private-data-plane-management-models/#customer-self-managed-wso2-provides-installation-script-and-updates-model).\n\n### Key Components for Private Data Plane Setup:\n- **Infrastructure Requirements**: \n   - Upstream-compatible Kubernetes clusters, a container registry, a key vault (secret store), and a logging service or log storage are essential.\n  \n- **Deployment**:\n  - The setup involves using a Helm installation on Kubernetes infrastructure, which includes installing various software components like Choreo API Gateways and observability agents.\n\n- **Connectivity**:\n  - The private data plane needs to communicate with the Choreo control plane, with all communications being outbound to ensure security.\n\n### Security and Compliance:\n- Choreo's private data planes provide extensive security measures, including zero-trust network security and end-to-end network traffic encryption.\n- They ensure compliance with regulations such as GDPR and CCPA by retaining data within the data plane.\n\nFor further details on the specific tasks and responsibilities associated with each management model, you can explore the comprehensive documentation [here](https://wso2.com/choreo/docs/references/private-data-plane-management-models/)."}
{"question": "If we opt for the 'Customer self-managed' model for our private data plane, what specific deliverables can we expect from the platform provider (WSO2), and what key operational responsibilities will our organization need to cover?", "answer": "In the 'Customer self-managed' model for a private data plane, WSO2 provides the installation script and updates, while the customer's organization is responsible for a range of operational tasks. Here’s a breakdown of the deliverables from WSO2 and the operational responsibilities of the customer:\n\n### Deliverables from WSO2:\n- **Installation Script**: WSO2 provides scripts to facilitate the installation process.\n- **Updates**: WSO2 is responsible for providing updates, including security patches and bug fixes.\n\n### Operational Responsibilities of the Customer:\nThe customer's organization is accountable for the following tasks:\n\n1. **Subscription Prerequisites**:\n   - Create subscriptions.\n   - Check quota and service limits.\n   - Run the Choreo compatibility prerequisite script.\n\n2. **Remote Access for Installation**:\n   - Provide owner access for installation.\n\n3. **Network Management**:\n   - Obtain the customer’s backend CIDR in the case of VPN/peering.\n   - Check end-to-end connectivity (both primary and failover).\n\n4. **Firewall Rules/Access Control**:\n   - Set up the firewall and necessary rules depending on the security tier.\n\n5. **Infrastructure Provisioning**:\n   - Provision Bastion and Kubernetes clusters.\n\n6. **Kubernetes Cluster Management**:\n   - Manage Kubernetes versions and increase node pool size.\n\n7. **Infrastructure Monitoring**:\n   - Set up alerts for monitoring infrastructure.\n\n8. **DNS Management for Choreo System**:\n   - Manage DNS infrastructure and SSL certificates for Choreo system components.\n\n9. **Choreo System Components Deployment**:\n   - Set up PDP agents via Helm.\n\n10. **Choreo System Components Management**:\n    - Upgrade, patch, and debug versions as necessary.\n\n11. **Choreo System Components Monitoring**:\n    - Set up continuous monitoring 24/7 and provide monthly uptime reports.\n\n12. **Choreo System Security Monitoring**:\n    - Depending on the tier, responsibilities include applying security patches, managing supply chain security, and adhering to compliance standards.\n\n13. **Choreo Application Creation/Deployment**:\n    - The customer is responsible for creating and deploying applications.\n\n14. **Choreo Application Management**:\n    - The customer manages their applications.\n\n15. **Choreo Application Monitoring**:\n    - The customer is responsible for monitoring their applications.\n\n16. **Choreo Application Logs**:\n    - The customer manages the logs for their applications.\n\nThis model emphasizes a shared responsibility where WSO2 assists with technical support while placing significant operational duties on the customer.\n\nFor more detailed information, you can refer to the documentation on the [Customer self-managed model](https://wso2.com/choreo/docs/references/private-data-plane-management-models/#customer-self-managed-wso2-provides-installation-script-and-updates-model)."}
{"question": "I'm new to deploying applications and I'm trying to understand how this platform simplifies the process. What are Deployment Tracks, and what are the primary benefits they offer compared to a traditional manual deployment approach?", "answer": "Deployment Tracks in Choreo are structured pathways designed to enhance the deployment process of software components. They serve as advanced Continuous Integration/Continuous Deployment (CI/CD) pipelines, providing a streamlined and organized approach to deploying components, whether they originate from source code or prebuilt images. \n\n### Key Benefits of Deployment Tracks\n\n1. **Streamlined Deployment Process**:\n   - Deployment Tracks facilitate a clear and efficient route for deploying software components, which minimizes errors and challenges typically faced in manual deployment workflows. This organized approach allows for better management of deployments across different environments.\n\n2. **Efficient API Versioning**:\n   - Deployment Tracks simplify the management of API versions, particularly for managed APIs. By enabling straightforward versioning, they ensure that new versions can interact seamlessly with previous ones. This is crucial for minimizing disruptions to API consumers while updates are continuously developed and deployed.\n\n3. **Integration with CI/CD**:\n   - Deployment Tracks can be linked to specific branches in a GitHub repository. When a pull request is merged, automatic deployments to designated environments can be triggered. This integration helps in maintaining smooth operations while adhering to development workflows.\n\n4. **Support for Continuous Deployment**:\n   - Users can connect Deployment Tracks with their own CI systems and utilize them solely as Continuous Deployment pipelines, allowing for direct deployment of images from linked container registries.\n\n5. **Independent Version Control**:\n   - Choreo allows for the creation and management of dedicated Deployment Tracks for components. This capability supports independent version control and the flexibility to unlink or relink deployment tracks to different branches according to preferred Git workflows.\n\nOverall, Deployment Tracks provide a structured and efficient approach to deployment and versioning, significantly improving the developer and consumer experience compared to traditional manual deployment methods.\n\nFor more detailed information, you can refer to the [Deployment Tracks documentation](https://wso2.com/choreo/docs/choreo-concepts/deployment-tracks/#the-significance-of-deployment-tracks)."}
{"question": "I have a service component I need to deploy. I already have my code in a Git repository, but I also have a separate CI system that produces Docker images. How can I use Deployment Tracks with these different setups? Also, my service has an API; how does the platform handle versioning and routing for this API when using Deployment Tracks and how does that impact other services that might use mine?", "answer": ""}
{"question": "I'm trying to understand how to manage deployments of my services reliably across different stages (like development, staging, production). I've heard about using \"Deployment Tracks\" for this. What is a Deployment Track, and how does it help make the deployment process more organized and less prone to errors? Also, could you explain the two main ways I can leverage Deployment Tracks for streamlined deployments?", "answer": ""}
{"question": "My team has an existing build system that produces Docker images, which we push to our internal container registry. We want to use the platform for deploying and managing these images in different environments. How can I set up a Deployment Track to work with images already in our registry instead of building from source code? What information would the platform need to deploy images this way?", "answer": ""}
{"question": "I'm deploying a service API and plan to make regular updates, including both backward-compatible enhancements (minor versions like v1.1, v1.2) and potentially future breaking changes (major versions like v2.0). How does the platform handle the public-facing API versioning for consumers, especially ensuring they get the latest updates within the current major version without manual intervention? What version format will API consumers see in the Marketplace?", "answer": ""}
{"question": "I have an existing service component linked to a Deployment Track for CI/CD, building from a GitHub branch and deploying to my development and production environments. I need to deploy a minor update (`v1.6`) to my production API, which is currently `v1.5`. Later, I will work on a major version (`v2.0`) in a separate branch. How would Deployment Tracks facilitate deploying the `v1.6` update and then managing the future `v2.0` alongside `v1.x`? Can I use the same Deployment Track for both?", "answer": ""}
{"question": "Can you explain what an Endpoint is in the context of a deployed application component, and which types of components are typically designed to expose them?", "answer": "In Choreo, an **endpoint** is a network-exposed function that resides within a deployed application component. It acts as a unique entry point for services and integrations, enabling them to interact with other components or external applications. Each endpoint can have an associated service contract, such as OpenAPI or GraphQL SDL, which defines how the endpoint can be consumed.\n\nEndpoints allow for the configuration of various attributes to facilitate communication, including:\n\n- **Name**: A unique identifier for the endpoint within the service component.\n- **Port**: The network port on which the endpoint is accessible.\n- **Type**: The protocol used by the endpoint (e.g., REST, GraphQL, gRPC, WS, UDP, TCP).\n- **Network Visibility**: Determines who can access the endpoint (Project, Organization, Public).\n- **Schema**: Defines the structure and format of the data exchanged.\n- **Context**: A context path for routing purposes (applicable to HTTP and GraphQL).\n\nTypically, the types of components that expose endpoints in Choreo include:\n\n1. **Service Components**: These components allow you to deploy and expose functionalities such as REST, GraphQL, gRPC, and more. They encapsulate business logic and provide standardized interfaces (i.e., endpoints) for communication.\n\n2. **Integration Components**: Similar to service components, these can also expose endpoints that allow other services and applications to interact with them.\n\nEndpoints are crucial for enabling API management, as they allow you to perform lifecycle management and configure security settings on a per-endpoint basis.\n\nFor further details on configuring endpoints, you can refer to the documentation: [Configure Endpoints](https://wso2.com/choreo/docs/develop-components/configure-endpoints)."}
{"question": "How does the platform utilize the concept of an Endpoint for managing and discovering services once they are deployed?", "answer": "In Choreo, endpoints are essential for managing and discovering services once they are deployed. Here's a comprehensive overview of how Choreo utilizes endpoints:\n\n### What is an Endpoint?\nAn endpoint is a network-exposed function that resides within a component, representing a unique entry point into a service or integration. Each component can expose one or more endpoints, and each endpoint can have a service contract associated with it (such as OpenAPI or GraphQL SDL). If no contract exists, Choreo defaults to using a wildcard (`/*`) for all HTTP verbs.\n\n### Role of Endpoints in Service Management\n1. **API Management**: Choreo allows for API management per endpoint, meaning you can perform lifecycle management and configure security settings for each endpoint individually.\n\n2. **Exposing Services**: Services and integrations can expose multiple endpoints, enabling different methods of interaction (e.g., REST API and GraphQL). This flexibility allows developers to define specific details like port number, protocol, and schema for each endpoint.\n\n3. **Discovery**: By defining endpoints with specific details, other services, integrations, or applications can discover and interact with the exposed services in a standardized way.\n\n### Endpoint Attributes\nChoreo defines endpoints using various attributes, which include:\n- **Name**: A unique identifier for the endpoint.\n- **Port**: The network port for accessing the endpoint.\n- **Type**: Protocol types such as REST, GraphQL, gRPC, etc.\n- **Network Visibility**: Controls access level (Project, Organization, or Public).\n- **Schema**: Specifies the data format exchanged through the endpoint.\n- **Context**: A context path for routing (applicable to HTTP and GraphQL).\n\n### Exposing Endpoints as Managed APIs\nTo ensure secure access to services, Choreo allows endpoints to be exposed as managed APIs. This is achieved by setting the network visibility to either \"Organization\" or \"Public.\" Doing so enables the endpoint to be managed through the Choreo API Gateway, providing benefits such as:\n- Full lifecycle API management\n- API throttling\n- Secure APIs with standard authorization flows\n- Analytics and monitoring\n\n### Marketplace Integration\nOnce a service component is deployed, the associated endpoints are automatically added to the Choreo Marketplace. Each service is identifiable by its endpoint, and essential details (like component name and endpoint name) are collected during deployment to generate service entries in the Marketplace.\n\nFor further details on configuring endpoints, you can refer to the documentation: [Configure Endpoints](https://wso2.com/choreo/docs/choreo-concepts/endpoint/)."}
{"question": "I'm new to cloud-native development and trying to understand how applications are deployed and managed in different stages (like testing vs. production). How does the concept of \"Environments\" in this platform help manage these distinct stages, and what is a fundamental rule about communication between these environments?", "answer": ""}
{"question": "My team follows a standard CI/CD practice where we build our application artifact once and then deploy that *exact same artifact* to different environments (dev, staging, prod). How does this platform support this \"build once, deploy many\" strategy, especially regarding managing configurations like database credentials or API keys which differ between environments?", "answer": ""}
{"question": "My company is planning to use this platform for several different teams, each working on separate sets of services and applications. We need a way to ensure that team members only have access to the resources relevant to their projects and that the applications developed by one team don't interfere with those of another. How does the platform's \"Organization\" structure help us manage this kind of separation and access control?", "answer": ""}
{"question": "We are considering deploying our sensitive applications on this platform using a private data plane instead of the standard cloud option for enhanced data privacy and control. How does the organization structure relate to this private data plane setup? What guarantees does a private data plane offer regarding data privacy and containment specifically for our organization's data, and what network connectivity is required for the private data plane to function correctly with the platform's management layer?", "answer": ""}
{"question": "I'm trying to understand how access is controlled within the platform. If a new team member joins my organization, how would their permissions to work with different services and projects typically be managed? What are the fundamental building blocks for defining what they can and cannot do?", "answer": ""}
{"question": "Our organization has different types of users: some who focus on building and deploying applications, and others who manage the platform infrastructure, monitoring, and overall governance. Which specific roles are defined that align with these responsibilities, and how do they differ in their capabilities? Also, I noticed a mention of a deprecated role; what was its purpose, and how does the system handle roles that are no longer actively used?", "answer": ""}
{"question": "I need to find the unique identifier for my organization within the platform. I remember seeing something about an \"Organization ID\". How do I find this specific identifier using the console?", "answer": "To find the Organization ID in the Choreo Console, you can follow these steps:\n\n1. Click on the **Organization** list in the header and select your organization from the dropdown.\n2. In the left navigation panel, click on **Settings**.\n3. Again, in the header, click the **Organization** list to open the organization-level settings page.\n4. Under the **Organization** section, you should see an option to **Copy ID**. Clicking this will allow you to copy your Organization ID.\n\nThis Organization ID uniquely identifies your organization within Choreo.\n\nFor more detailed information, you can refer to the documentation [here](https://wso2.com/choreo/docs/choreo-concepts/organization/#organization-id)."}
{"question": "I've encountered two terms: \"Organization ID\" and \"Organization Handle\". Are these the same thing, or do they represent different identifiers for an organization? If they are different, what is the key distinction, and how would I retrieve the \"Organization Handle\"?", "answer": ""}
{"question": "I'm trying to understand how different teams and their applications are organized within the platform. What are the main levels of grouping for users and application resources, and how do they relate to each other?", "answer": "In Choreo, the main levels of grouping for users and application resources are organized into a hierarchical structure that consists of **Organizations**, **Projects**, **Groups**, and **Roles**. Here’s how these levels relate to each other:\n\n### 1. Organizations\n- An **Organization** is the top-level grouping in Choreo. It serves as a logical structure that encompasses users and resources. \n- Users and resources within an organization cannot access resources from another organization unless invited by an admin of that organization.\n\n### 2. Projects\n- Within each organization, there are **Projects**. These are specific environments where application resources are developed and managed.\n- Projects inherit the resources and data planes connected to the organization.\n\n### 3. Groups\n- A **Group** is a collection of users within an organization. Each group can be assigned specific **Roles** that determine the permissions for all its members. \n- Groups allow for easier management of user permissions, as roles assigned to a group automatically apply to all users in that group.\n\n### 4. Roles\n- **Roles** define a collection of permissions. For example, predefined roles include API Publisher, API Subscriber, Admin, and Developer. \n- Users inherit permissions based on the roles assigned to their groups. This hierarchical structure ensures that permissions can be managed effectively across the organization and its projects.\n\n### Access Control\n- The access control is managed based on the hierarchy:\n  - **Organization Level**: Roles assigned at this level provide permissions across all projects within the organization.\n  - **Project Level**: Roles assigned here limit permissions to specific projects.\n\nThis hierarchical structure allows for flexible and scalable management of user permissions and application resources within Choreo, ensuring that users have appropriate access based on their roles and group memberships.\n\nFor more detailed information, you can refer to the following documentation:\n- [Resource Hierarchy](https://wso2.com/choreo/docs/choreo-concepts/resource-hierarchy/)\n- [Organization](https://wso2.com/choreo/docs/choreo-concepts/organization/)\n- [Control Access in the Choreo Console](https://wso2.com/choreo/docs/administer/control-access-in-the-choreo-console/)"}
{"question": "I want to set up different stages for my application, like a development environment for testing new features and a production environment for live users. How does the platform handle these different stages, and what ensures that my development code doesn't interfere with production?", "answer": ""}
