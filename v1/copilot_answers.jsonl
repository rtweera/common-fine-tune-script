{"question": "What is the Choreo Marketplace and what is its main purpose?", "answer": "The Choreo Marketplace is a platform within Choreo that promotes and facilitates the reuse and sharing of services. Its main purpose is to allow users to share all the services that have been deployed in Choreo, making it easier for teams within an organization to discover and utilize these services.\n\n### Key Features of the Choreo Marketplace:\n1. **Service Discovery**: Users can easily browse and search for available services within the Marketplace. This includes the ability to refer to service definitions, documentation, and instructions on how to use each service.\n\n2. **Search Functionality**: The Marketplace provides a top search bar that allows users to search for services by:\n   - **Name**: The service name.\n   - **Label**: The service labels.\n   - **Content**: The service overview, summary, and documentation.\n   - **All**: A combination of all the above criteria.\n\n3. **Filtering Options**: To enhance discoverability, users can apply various filter criteria on the left-hand side filter panel. This includes:\n   - **Type**: Services can be categorized as \"Internal\" (deployed within Choreo) or \"Third-party\" (external services added to the Marketplace).\n   - **Network Visibility**: Services can also be filtered by their visibility level: \"Public,\" \"Organization,\" or \"Project.\"\n\n4. **Automatic Service Addition**: When a service is deployed in Choreo, it is automatically added to the Marketplace with essential details such as component name, endpoint name, and service definitions.\n\nThe Choreo Marketplace enhances collaboration and efficiency by enabling teams to leverage existing services, fostering a culture of reuse and innovation.\n\nFor more detailed information, you can refer to the [Choreo Marketplace documentation](https://wso2.com/choreo/docs/choreo-concepts/choreo-marketplace/)."}
{"question": "How can I find specific services within the Choreo Marketplace?", "answer": "\nTo search for specific services or APIs in the Choreo Marketplace, you can utilize the UI search functionality and filters available on the platform. By entering keywords related to the service or API you are looking for, you can narrow down the results to find the relevant offerings. If you need more details about a specific API, feel free to ask for assistance! \n\nHere are some of the APIs available in the Choreo Marketplace that you might find helpful:\n\n1. **API Name:** choreo-be-demo\n   - **Version:** v1.0\n   - **Type:** REST\n   - **Description:** This is for testing choreo functionality\n   - **Endpoints:**\n     - GET /*\n     - PUT /*\n     - POST /*\n     - DELETE /*\n     - PATCH /*\n\n2. **API Name:** Reading List REST Service in Go - Reading List\n   - **Version:** 1.0.0\n   - **Type:** REST\n   - **Description:** A simple REST API service written in Go\n   - **Endpoints:**\n     - GET /books List all the reading list books\n     - POST /books Add a new book to the reading list\n     - GET /books/{id} Get reading list book by id\n     - PUT /books/{id} Update a reading list book by id\n     - DELETE /books/{id} Delete a reading list book by id\n\nIf you need more information about any specific API, feel free to ask!"}
{"question": "What search criteria can I use to look for services in the Marketplace?", "answer": "\nIn the Choreo Marketplace, you can search for services based on various criteria such as API name, API version, API type, and API description. You can use these criteria to filter and find the specific services you are looking for. If you need more details about a particular API, feel free to ask! \n\nHere are some of the APIs available in the Choreo Marketplace:\n\n1. **API Name:** choreo-be-demo\n   - **Version:** v1.0\n   - **Type:** REST\n   - **Description:** This is for testing choreo functionality\n\n2. **API Name:** Reading List REST Service in Go - Reading List\n   - **Version:** 1.0.0\n   - **Type:** REST\n   - **Description:** A simple REST API service written in Go\n   - **Endpoints:**\n     - GET /books List all the reading list books\n     - POST /books Add a new book to the reading list\n     - GET /books/{id} Get reading list book by id\n     - PUT /books/{id} Update a reading list book by id\n     - DELETE /books/{id} Delete a reading list book by id"}
{"question": "What are the filtering options available in the Choreo Marketplace?", "answer": "\nIn the Choreo Marketplace, users can filter APIs based on various criteria such as API name, version, type, and description. Additionally, users can also search for APIs using keywords and tags to find relevant APIs. The marketplace provides a user-friendly interface with advanced search functionalities to help users easily discover, compare, and select APIs based on their specific requirements. If you need more details about a specific API or want to explore further filtering options, feel free to ask!"}
{"question": "What kind of information can I see when I explore a service in detail?", "answer": "When exploring a service in detail in the Choreo Console, you can access a variety of information organized into four main tabs:\n\n1. **Overview**: This tab displays a summary provided by the service developer about the service. If there is no content available from the developer, this section will be disabled.\n\n2. **API Definition**: Here, you'll find the API definition for the service, which is extracted from the `component.yaml` file in the user repository. If no API definition is provided, this tab will be empty.\n\n3. **How to Use**: This tab contains instructions on how to use the selected service, including guidelines on creating a connection to it.\n\n4. **Related Documents**: This section includes any additional documentation that the service developer has provided through the Manage â†’ Marketplace section of the component.\n\nThis structured layout allows users to gain a comprehensive understanding of the service and how to interact with it effectively.\n\nFor more detailed information, you can refer to the documentation [here](https://wso2.com/choreo/docs/choreo-concepts/choreo-marketplace/#explore-a-service)."}
{"question": "How do services get added to the Choreo Marketplace?", "answer": "To add services to the Choreo Marketplace, you can follow these steps depending on the type of service you want to add:\n\n### Adding a Choreo Service\n1. **Deployment**: When you deploy a service in Choreo, it is automatically added to the Marketplace. Each service is identifiable by an endpoint within a Choreo service component.\n2. **Details Collection**: During the deployment, Choreo collects essential details like component name, endpoint name, description, and service definitions to create the service entries in the Marketplace.\n3. **Service Naming Convention**: The service name will follow the convention of `component name - endpoint name`.\n\n### Adding a Third-Party Service\n1. **Basic Registration**:\n   - In the Choreo Console, navigate to **Dependencies** and then click on **Third-Party Services**.\n   - Click **+ Register** to provide the basic details such as Name, Version, and upload the service definition file.\n   - After defining the service, you will be prompted to define the endpoints.\n\n2. **Define Service Endpoints**:\n   - Enter a Name for the endpoint and its Endpoint URL, along with any additional parameters required for connection.\n   - Ensure that you select the environments where the endpoint should be accessible.\n   - Click **Register**. If at least one endpoint is defined correctly, the service will automatically be listed in the Internal Marketplace.\n\n3. **Add to Internal Marketplace**: \n   - If you need to add the service to the Internal Marketplace manually after registering it, navigate to the service and click **Add to Marketplace**.\n\nFor more detailed information on this process, you can refer to the following documentation:\n- [Add a service to the Choreo Marketplace](https://wso2.com/choreo/docs/choreo-concepts/choreo-marketplace/#add-a-service-to-the-choreo-marketplace)\n- [Register a third-party service in Choreo](https://wso2.com/choreo/docs/integrate-and-manage-external-services/integrate-and-manage-third-party-services/#register-a-third-party-service-in-choreo)"}
{"question": "How does service versioning work in the Choreo Marketplace?", "answer": "\nIn the Choreo Marketplace, service versioning allows developers to manage different versions of services effectively. When a service is updated or modified, a new version is created to ensure backward compatibility and smooth transitions for existing users. \n\nTo manage different versions of services effectively, developers can follow these processes and best practices:\n1. **Semantic Versioning**: Follow semantic versioning (e.g., MAJOR.MINOR.PATCH) to clearly communicate the impact of changes in each version.\n2. **API Documentation**: Update API documentation for each version to provide clear information on changes, deprecations, and new features.\n3. **Deprecation Policy**: Define a deprecation policy to inform users about the lifecycle of each version and when they will be phased out.\n4. **Versioning Strategy**: Plan a versioning strategy that aligns with the service's roadmap and ensures smooth transitions for users.\n5. **Testing and Validation**: Thoroughly test each version to ensure backward compatibility and prevent breaking changes for existing users.\n6. **Communication**: Communicate version updates, changes, and deprecations effectively to users through release notes, announcements, and notifications.\n\nNow, based on the provided API details, here are some relevant APIs that you can explore further:\n1. **API Name**: choreo-be-demo\n   - **Version**: v1.0\n   - **Type**: REST\n   - **Description**: This API is for testing choreo functionality.\n   - **Endpoints**: \n     - GET /*\n     - PUT /*\n     - POST /*\n     - DELETE /*\n     - PATCH /*\n   \n2. **API Name**: Reading List REST Service in Go - Reading List\n   - **Version**: 1.0.0\n   - **Type**: REST\n   - **Description**: This is a sample service that manages a list of reading items.\n   - **Endpoints**:\n     - GET /books List all the reading list books\n     - POST /books Add a new book to the reading list\n     - GET /books/{id} Get reading list book by id\n     - PUT /books/{id} Update a reading list book by id\n     - DELETE /books/{id} Delete a reading list book by id\n\nThese APIs showcase different services available in the Choreo Marketplace that you can explore for your development needs. If you need more information about a specific API or have any other questions, feel free to ask!"}
{"question": "If I connect to a service from the Marketplace, how does it handle new minor versions?", "answer": "\nI can provide details about how new minor versions of services from the API Marketplace are handled in terms of version management, updates, and notifications for users connecting to a service. Would you like me to list some relevant APIs that can assist in version management, updates, and notifications for services in the API Marketplace?"}
{"question": "Can I edit or update service information in the Choreo Marketplace?", "answer": ""}
{"question": "What is Choreo's approach to CI/CD?", "answer": "I'm sorry, but I don't have enough information to answer your question about Choreo's approach to CI/CD, including specific methodologies, tools, or processes it uses. If you have any other questions, feel free to ask!"}
{"question": "How do environments work in Choreo, and can I customize them?", "answer": "I'm sorry, but I don't have enough information to answer your question about how environments work in Choreo and the available customization options for them. If you have any other questions or need information on a different topic, feel free to ask!"}
{"question": "What does the 'build once, deploy many' strategy mean in Choreo?", "answer": "I'm sorry, but I don't have enough information to provide a comprehensive answer about the 'build once, deploy many' strategy in the context of Choreo. If you have specific resources or documentation regarding this topic, I would be happy to help you understand them better."}
{"question": "How does Choreo handle configurations and secrets for different environments, and are they secure?", "answer": "I'm sorry, but I don't have enough information to answer your question about how Choreo handles configurations and secrets for different environments and the associated security measures. If you have specific documentation or details, I would be happy to help clarify any points within that context."}
{"question": "What are the typical steps involved in a Choreo build pipeline?", "answer": "A typical Choreo build pipeline consists of several key steps that facilitate the building and deployment of your components. Here's an overview of these steps:\n\n1. **Build Container Image**: Choreo begins by building a container image either from the source code you've provided or from a specified Dockerfile for a specific commit.\n\n2. **Security and Vulnerability Scans**: The build pipeline runs security and vulnerability scans, depending on the type of component being built. This ensures that the built image is secure before it is pushed to a registry.\n\n3. **Push to Container Registry**: Once the image is built and scanned, it is pushed to a container registry. For a Choreo-managed cloud data plane, the image is stored in a registry managed by Choreo. If you're using a private data plane, the image is pushed to your own registry.\n\n4. **Update Service Endpoints and API Specifications**: If applicable, the service endpoints and API specifications are updated based on the information provided in your repository.\n\n5. **Integration of Unit Tests (Optional)**: Some buildpacks allow for the integration of unit tests into the build pipeline, enabling you to ensure that your code behaves as expected before deployment.\n\n6. **Triggering Builds**: You can manually trigger a build from the Build page by clicking **Build Latest** or set up automatic builds on each commit by enabling the **Auto Build on Commit** feature.\n\n7. **Build Logs**: You can view the logs of the builds on the Build page to check for any issues or confirmations of success.\n\nThese steps ensure a smooth transition from code to deployment, safeguarding the integrity and security of your applications throughout the process. For more detailed information, you can refer to the [Choreo Build documentation](https://wso2.com/choreo/docs/choreo-concepts/ci-cd/#build)."}
{"question": "Can I integrate unit tests into the build process?", "answer": "Yes, unit tests can be integrated into the build process in Choreo. This integration allows for code validation before deployment, ensuring that any changes are tested early and reducing the risk of defects in production. However, it's important to note that Choreo currently supports unit tests only for the `WSO2 MI` buildpack.\n\nHereâ€™s how you can integrate unit tests into your build pipeline:\n\n### Step 1: Write Tests\nYou need to create unit tests within your source code using standard testing libraries. For specific instructions on creating unit tests for WSO2 Micro Integrator projects, you can refer to the guide on [Creating a Unit Test Suite](https://mi.docs.wso2.com/en/latest/develop/creating-unit-test-suite/).\n\n### Step 2: Enable Unit Tests\n1. In the **Component Listing** pane, click on the component for which you want to enable unit tests.\n2. In the left navigation menu, click on **Build**.\n3. On the **Build** page, click to edit **Build Configurations**.\n4. Turn on the **Unit Test** toggle.\n5. Click **Save**.\n\n### Step 3: Trigger a New Build\n- On the **Build** page, click **Build Latest**. This action will start a new build with the unit tests enabled, and you can monitor its progress in the **Build Details** pane.\n\n### Viewing Failed Unit Tests\nIf a unit test fails during the build process, you can view detailed logs for troubleshooting. Click **View Details** corresponding to the failed build, and then expand the failed unit test step to access the logs.\n\nFor a practical example, you can explore the [WSO2 MI helloworld](https://github.com/wso2/choreo-samples/tree/main/hello-world-mi) sample to see unit tests in action within the build pipeline.\n\nFor more detailed information, you can refer to the documentation on [Integrate Unit Tests into the Build Pipeline](https://wso2.com/choreo/docs/develop-components/integrate-unit-tests-into-the-build-pipeline/)."}
{"question": "What are 'repeatable builds' in Choreo?", "answer": "In Choreo, \"repeatable builds\" refer to the capability of the platform to replicate builds from an identical code version, specifically a Git commit. This means that if multiple builds are initiated from the same commit, Choreo will generate Docker images that behave the same way each time. This functionality ensures consistency across builds, which is critical for maintaining stability and reliability in deployment processes.\n\n### Implementation of Repeatable Builds in Choreo\n\n1. **Build Triggering**: You can initiate a build from the **Build** page in the Choreo console. There are options to build the latest version or select a specific commit to build an image from.\n   \n2. **Build Process**: During the build process, Choreo performs several steps:\n   - It builds a container image from the source code or a Dockerfile associated with the selected commit.\n   - Security and vulnerability scans may be carried out, depending on the component type.\n   - The built image is then pushed to a container registry (either Choreo-managed or your own, if using a private data plane).\n   - It updates service endpoints and API specifications as necessary.\n\n3. **Image Management**: When multiple builds are triggered from the same code version, Choreo retains only the most recent Docker image created from that specific version. This means that any previous images from the same commit are replaced, which helps in managing storage and ensuring that only the latest build is used.\n\n4. **Auto Build on Commit**: If you want to automate this process, you can enable the **Auto Build on Commit** feature, which triggers a build automatically with each commit made to the connected Git repository.\n\nBy leveraging these features, Choreo ensures that developers can achieve consistent and reliable deployments, making it easier to maintain applications over time.\n\nFor more detailed information, you can refer to the documentation: [Choreo CI/CD Build Documentation](https://wso2.com/choreo/docs/choreo-concepts/ci-cd/#build)."}
{"question": "How do I trigger a build in Choreo, and can it be automated?", "answer": "In Choreo, you can manually trigger a build through the following steps:\n\n1. In the left navigation menu, click on **Build**.\n2. Depending on your component type, you will see a **Builds** pane. Click **Build** to open the **Commits** pane, where you can view all the commits related to your component.\n3. Select the latest commit (or the specific commit you want to build) and click **Build**. This action will initiate the build process, and you can monitor the progress in the **Build Logs** pane.\n\nOnce the build is complete, the build status will be listed in the **Builds** pane as **Success**.\n\n### Options for Automating the Build Process\nTo automate the build process, you can enable **Auto Build on Commit**. This feature allows Choreo to automatically trigger a build every time there is a new commit to the connected Git repository. This way, you ensure that your application is always built with the latest code changes without needing to trigger builds manually.\n\nAdditionally, if you are in a scenario that requires it, admin and Choreo DevOps users can trigger builds using specific tags from the connected Git repository. However, this should be done cautiously as it bypasses the standard branch-based deployment process and can affect deployment integrity.\n\nFor more detailed information, you can refer to the following documentation links:\n- [Build and Deploy a Single-Page Web Application](https://wso2.com/choreo/docs/develop-components/develop-web-applications/build-and-deploy-a-single-page-web-application/#build-your-web-application)\n- [CI/CD Build](https://wso2.com/choreo/docs/choreo-concepts/ci-cd/#build)"}
{"question": "Where can I view the logs for my builds?", "answer": "In Choreo, you can view the logs for your builds on the **Build** page. Hereâ€™s how to do it:\n\n1. Navigate to the **Build** page within the Choreo console.\n2. Locate the build for which you want to view the logs.\n3. Click on **View Details** corresponding to that specific build. \n4. Here, you can see the detailed logs for that build.\n\nAdditionally, if you have unit tests integrated into your build pipeline and a unit test fails, you can click on **View Details** for the failed build and expand the failed unit test step to view its detailed logs for troubleshooting.\n\nFor more information, you can refer to the following documentation links:\n- [CI/CD Build Documentation](https://wso2.com/choreo/docs/choreo-concepts/ci-cd/#build)\n- [Integrate Unit Tests into the Build Pipeline](https://wso2.com/choreo/docs/develop-components/integrate-unit-tests-into-the-build-pipeline/#view-failed-unit-tests)"}
{"question": "How do I deploy an image in Choreo, and can I automate deployments?", "answer": "To deploy a container image in Choreo and automate deployments, you can follow these steps:\n\n### Deploying a Container Image\n\n1. **Container Registry**: Ensure you have a container image ready in a container registry that Choreo supports (e.g., Docker Hub, GitHub Container Registry, etc.).\n\n2. **Access the Deploy Page**:\n   - In the Choreo console, navigate to the **Deploy** page of your component.\n\n3. **Set Up Deployment**:\n   - In the **Set Up** card, you can choose to either manually deploy the image or set it up for automatic deployment:\n     - **Manually Deploy**: Click the **Deploy** button to initiate the deployment process.\n     - **Automatically Deploy on Build**: Enable the **Auto Deploy on Build** option. This will automatically deploy the image once a build is completed.\n\n4. **Configuration**: Make sure to provide any necessary configurations for your application in the **Configs & Secrets** section. You can define how to mount these configurations to the container (as environment variables or files).\n\n5. **Trigger the Build**: \n   - If you have enabled **Auto Build on Commit**, Choreo will automatically build and deploy whenever a change is pushed to your repository. Note that you need to trigger the first build manually.\n\n### Automating Deployments\n\nTo automate deployments further, you can integrate your existing CI/CD pipeline with Choreo:\n\n1. **Build and Push Image**: Use your CI pipeline to build and push the container image to the container registry.\n\n2. **Integrate with Choreo**:\n   - In the Choreo console, navigate to **DevOps** and then **External CI** to generate a token for your CI pipeline.\n   - Store the token securely, as it is specific to your component.\n\n3. **Trigger Automatic Deployment**:\n   - Use an HTTP POST request to the Choreo webhook endpoint with the updated image details. This can be done directly from your CI pipeline to trigger a deployment whenever a new image is available.\n\n4. **Webhook Configuration**: You can refer to the webhook snippets provided by Choreo to set this up seamlessly.\n\nBy following these steps, you can effectively deploy a container image in Choreo and automate future deployments. \n\nFor more detailed steps and configurations, you can refer to the documentation:\n- [Auto-deploy images in Choreo with an external CI/build pipeline](https://wso2.com/choreo/docs/develop-components/bring-your-own-image/#auto-deploy-images-in-choreo-with-an-external-cibuild-pipeline)\n- [Deployment](https://wso2.com/choreo/docs/choreo-concepts/ci-cd/#deployment)"}
{"question": "Are there any special considerations for deploying Ballerina components?", "answer": "When deploying Ballerina components in Choreo, there are several special considerations to keep in mind:\n\n1. **Java Runtime Compatibility**: \n   - If you have created components using the Ballerina preset, it is highly recommended to redeploy your components before any infrastructure upgrades. This ensures that your component is built using the latest Java Runtime version, which is crucial for compatibility.\n\n2. **Initial Deployment**: \n   - The first build of a Ballerina component must be triggered manually. This allows Choreo to apply the necessary configurations to the development environment. After this initial deployment, you can enable automatic builds and deployments.\n\n3. **Configurable Management**: \n   - Choreo manages Ballerina configurables, allowing you to modify these configurables during deployment or promotion via the Deploy page. This is crucial because if you change any configurables, it may lead to failures in automatic build pipelines to prevent runtime crashes.\n\n4. **Immutable Deployments**: \n   - Once a component is deployed with specific configurations, those configurations become immutable. Any subsequent changes will require a new deployment.\n\n5. **Promoting Components**: \n   - Choreo builds a container once per GitHub commit, and you can promote it across higher environments from the Deploy page of a component.\n\n6. **Backward Compatibility**: \n   - If you change the configurations in your Ballerina component, ensure backward compatibility with at least one previous release to avoid issues.\n\nFor more detailed steps on deploying Ballerina components in Choreo, including how to manage configurations and perform deployments, you can refer to the following documentation links:\n- [Choreo Kubernetes Infrastructure Upgrade Notice](https://wso2.com/choreo/docs/resources/kubernetes-upgrade-notice/#action-required)\n- [CI/CD Deployment](https://wso2.com/choreo/docs/choreo-concepts/ci-cd/#deployment)\n- [Manage Ballerina Configurables](https://wso2.com/choreo/docs/devops-and-ci-cd/manage-configurations-and-secrets/#manage-ballerina-configurables)\n\nThese considerations will help ensure a smooth deployment process for your Ballerina components in Choreo."}
{"question": "What happens if I change configurations after a component is deployed?", "answer": "Changing configurations of a component in Choreo after deployment can have several effects depending on the type of configurations being modified. Hereâ€™s a breakdown of what happens with different types of configurations:\n\n### Environment-independent Configurations\n- **Definition**: These configurations apply to all environments.\n- **Modification Process**: To change these configurations, you need to go to the **Deploy** page of the component, make the necessary changes via the **Set Up** card, and then trigger a new deployment. After that, you can promote the component to higher environments.\n- **Effect**: Changing these configurations will result in a new deployment of the component, which may impact the behavior of the service across all environments where it is deployed.\n\n### Environment-specific Configurations\n- **Definition**: These configurations are specific to a particular environment.\n- **Modification Process**: To change them, navigate to the **Deploy** page, make the necessary changes in the specific environment card, and trigger a new deployment.\n- **Effect**: Similar to environment-independent configurations, modifying these configurations will also lead to a new deployment, affecting only the specified environment.\n\n### Immutable Deployments\nOnce a component is deployed with certain configurations, those configurations become immutable. This means any change to the configurations will necessitate a new deployment. In essence, the existing deployment remains unchanged until you initiate a new deployment with updated configurations.\n\n### Zero-downtime Deployments\nChoreo ensures zero downtime between deployments and promotions through rolling updates. If you have set up health checks for your component, these checks will be performed on the new build before switching traffic from the current build, which helps maintain service availability.\n\n### Summary\nIn summary, changing configurations of a component after deployment leads to a new deployment, which can impact the behavior of the component. Itâ€™s essential to ensure that any changes are thoroughly tested and that health checks are configured to avoid deploying unhealthy versions of the component.\n\nFor more detailed information on managing configurations, you can refer to the [Configuration Management document](https://wso2.com/choreo/docs/choreo-concepts/ci-cd/#configurations)."}
{"question": "How do I promote a component from one environment to another, like from development to production?", "answer": "To promote a component from one environment to another in Choreo, you need to follow a structured process that involves requesting approval for the promotion. Here's how you can do it:\n\n### Steps to Promote a Component\n\n1. **Prerequisites**:\n   - Ensure that you have a component created, built, and deployed to the development environment.\n   - Ensure that an approval workflow is configured for environment promotion.\n   - Confirm that you are promoting the component to a critical environment, such as production.\n\n2. **Request Approval**:\n   - In the **Component Listing** pane, click on the component you want to promote. This will take you to the **Overview** page of the component.\n   - In the left navigation menu, click on **Deploy**.\n   - Go to the **Development** card and click **Request to Promote**.\n   - In the **Request Approval** pane that opens, enter your request details and click **Submit**. This action creates a request and notifies all authorized assignees via email about the request.\n\n3. **Approval Process**:\n   - While the environment promotion request is pending review, Choreo restricts other developers from making the same request until the pending request is either approved or rejected.\n   - Once an authorized assignee approves the request, you will receive a confirmation email, allowing you to proceed to promote the component to the target environment.\n\n### Additional Information\n- Choreo provides two default environments: development and production. You can promote your components within these environments.\n- It is also possible to override configuration values specific to the target environment during the promotion process.\n\nFor more detailed information, you can refer to the relevant documentation on [Request approval for environment promotion](https://wso2.com/choreo/docs/develop-components/submit-and-manage-workflow-approval-requests/#request-approval-for-environment-promotion) and [Manage Environments](https://wso2.com/choreo/docs/devops-and-ci-cd/manage-environments/)."}
{"question": "What's the difference between environment-independent and environment-specific configurations, and how do I manage them?", "answer": "In Choreo, configurations are categorized into two types: **environment-independent configurations** and **environment-specific configurations**. Understanding the difference between these two types is crucial for effectively managing your application's settings across various environments.\n\n### Environment-independent Configurations\n- **Definition**: These configurations are applicable across all environments (e.g., development, staging, production). They are consistent and do not change regardless of the environment in which your service is deployed.\n- **Management**: To change environment-independent configurations, you need to:\n  1. Navigate to the **Deploy** page of your component.\n  2. Make the necessary changes via the **Set Up** card.\n  3. Trigger a new deployment to the initial environment.\n  4. Afterward, you can promote the component to higher environments.\n\n### Environment-specific Configurations\n- **Definition**: These configurations are tailored for a specific environment. They allow you to customize settings that may vary depending on the environment's requirements.\n- **Management**: To adjust environment-specific configurations, you should:\n  1. Go to the **Deploy** page of your component.\n  2. Make changes via the card associated with the specific environment.\n  3. Trigger a new deployment to apply these changes.\n\n### Guidance on Managing Configurations\n- **Use Configuration Groups**: Choreo allows you to create Configuration Groups to manage reusable configurations across components. This ensures consistency and simplifies the management of configurations by linking them to components at deployment time. \n- **Secrets vs Configurations**: It's important to differentiate between configurations and secrets. While configurations can be read and updated, secrets are write-only and should be used for sensitive information, such as passwords or service credentials.\n\nFor more detailed information on managing configurations in Choreo, you can refer to the following documentation:\n- [Configuration Management](https://wso2.com/choreo/docs/choreo-concepts/configuration-management/)\n- [Manage Configurations and Secrets](https://wso2.com/choreo/docs/devops-and-ci-cd/manage-configurations-and-secrets/#the-difference-between-configurations-and-secrets)\n- [Manage Configuration Groups](https://wso2.com/choreo/docs/devops-and-ci-cd/manage-configuration-groups/)"}
{"question": "How can I monitor the execution of my scheduled or manual tasks?", "answer": "To monitor the execution of scheduled or manual tasks in Choreo, you should utilize the **Execute** view available in the Choreo console. Here's how you can do it:\n\n1. **Access the Execute View**: In the left navigation menu, click on **Execute**. This view allows you to track and monitor executions associated with both scheduled and manual tasks.\n\n2. **View Total Executions**: This section provides the total number of executions that have occurred within the past 30 days. This gives you a quick snapshot of the activity level for your tasks.\n   ![Total Execution](https://wso2.com/choreo/docs/assets/img/develop-components/develop-a-scheduled-integration/total_executions.png)\n\n3. **Check Execution History**: You can view the currently active executions as well as those that have been completed. This includes information such as:\n   - Execution ID\n   - Revision of the execution\n   - Time it was triggered\n   ![Execution History](https://wso2.com/choreo/docs/assets/img/develop-components/develop-a-scheduled-integration/execution_history.png)\n\n4. **Access Detailed Execution Logs**: By clicking on a specific execution, you can view detailed logs associated with that execution. Note that it may take a few minutes for the logs to appear, and you might need to manually refresh the page to see the latest logs.\n   ![Execution Logs](https://wso2.com/choreo/docs/assets/img/develop-components/develop-a-scheduled-integration/execution_logs.png)\n\nThis functionality not only enhances transparency but also aids in troubleshooting and overall execution management, allowing you to effectively monitor and analyze your workflows.\n\nFor more detailed information, you can refer to the documentation here: \n- [Task Execution in Choreo](https://wso2.com/choreo/docs/choreo-concepts/ci-cd/#task-execution)\n- [Monitor Executions for Manual Tasks](https://wso2.com/choreo/docs/develop-components/develop-integrations/develop-a-manual-task/#step-7-monitor-executions)\n- [Monitor Executions for Scheduled Tasks](https://wso2.com/choreo/docs/develop-components/develop-integrations/develop-a-scheduled-task/#step-6-monitor-executions)"}
{"question": "Does Choreo ensure my application stays online during deployments or promotions?", "answer": "Choreo handles deployments to ensure that applications remain online and experience no downtime during the process through a mechanism known as **zero-downtime deployments**. Hereâ€™s how it works:\n\n1. **Rolling Updates**: Choreo performs rolling updates, meaning that instead of shutting down the entire application for an update, it updates the application incrementally. This ensures that parts of the application remain available while others are being updated.\n\n2. **Health Checks**: Before switching traffic from the current build to the new build, Choreo conducts a health check. This step is crucial as it verifies the new build's functionality and readiness for production. If the health checks are not successful, the deployment can be halted, preventing any potential issues from affecting the live application.\n\n3. **Configuration of Health Checks**: For a component, itâ€™s important to configure the necessary health checks. This configuration helps in preventing the deployment of unhealthy versions of the component, ensuring that only stable and functional versions are promoted to production.\n\nThese features work together to minimize the risk of downtime during deployments, allowing for a smoother transition between versions of your applications.\n\nFor more detailed information on zero-downtime deployments in Choreo, you can visit the following documentation link: [Zero-downtime deployments](https://wso2.com/choreo/docs/choreo-concepts/ci-cd/#zero-downtime-deployments)."}
{"question": "What exactly is a 'component' in Choreo?", "answer": "A **component** in Choreo represents a single unit of work within a cloud-native application. It is primarily utilized to encapsulate specific functionalities, such as microservices, APIs, scheduled tasks, or jobs. Each component is linked to a directory path in a Git repository, which contains either the program's source code or a Dockerfile that provides build instructions. \n\nHere are some key roles and functionalities of components within Choreo:\n\n1. **Unit of Deployment**: Each component acts as a unit that can be independently deployed, managed, and scaled. When deployed, each component corresponds to a single pod in the Kubernetes cluster, allowing for flexibility in resource management.\n\n2. **Variety of Types**: Choreo supports different types of components, including:\n   - **Services**: These are fundamental building blocks that expose functionality to other components or external systems, and they can communicate through standardized interfaces called endpoints.\n   - **APIs**: Components can be designed to serve as APIs for various integrations.\n   - **Web Applications**: Components can also encapsulate front-end applications hosted within Choreo.\n   - **Scheduled Jobs**: These components can run tasks at specified intervals using cron expressions.\n\n3. **Integration and Connections**: Components can be connected to each other to create comprehensive solutions. You can define component-level connections that allow a component to interact with other services, enabling complex integrations within your application architecture.\n\n4. **Independent Management**: Since each component can be deployed separately, developers can modify, update, or scale components without affecting the entire system, enhancing agility and responsiveness to changes in workload.\n\nFor more detailed information about components in Choreo, you can refer to the official documentation here: [Choreo Component Documentation](https://wso2.com/choreo/docs/choreo-concepts/component/)."}
{"question": "How does Choreo handle the deployment of individual parts of my application?", "answer": "Choreo facilitates the deployment of individual parts or components of an application through several key functionalities:\n\n1. **Components as Deployable Units**: In Choreo, a component represents a single unit of work, such as a microservice, API, or task. Each component is associated with a specific directory path in a Git repository, which contains either the source code or a Dockerfile with build instructions. This setup allows you to deploy, manage, and scale each component independently. Each component corresponds to a single pod in a Kubernetes cluster, ensuring that deployment is isolated and efficient.\n\n2. **Deployment Tracks**: Choreo allows for the creation and management of dedicated deployment tracks for components. This feature enables independent version control and deployment of components. You can unlink deployment tracks from associated branches or relink them to different branches, which aligns with various Git workflows, such as feature branch workflow or GitFlow. This flexibility means that you can manage deployments in a way that suits your development process.\n\n3. **Containerized Application Deployment**: Choreo supports the deployment of applications written in various language frameworks (e.g., Java, Go, NodeJS, Python) using containers. This includes deployment for different component types such as services, web applications, scheduled tasks, manual tasks, event handlers, and test runners. This broad support for containerized applications ensures that you can deploy different parts of your application seamlessly.\n\n4. **CI/CD Integration**: Choreo provides a streamlined continuous integration and continuous deployment (CI/CD) experience. It creates isolated environments for each project where all components share the same environment but do not communicate across different environments. Choreo adopts a \"build once, deploy many\" strategy, allowing you to build your application once and promote it to various environments (e.g., development, production) as needed. This approach facilitates testing in non-production environments before promoting changes to production.\n\n5. **Configuration Management**: Choreo injects environment-specific configurations and secrets into components at runtime, ensuring that sensitive information is securely managed and separated from the source code. This includes credentials for databases and external services, which are encrypted and securely stored.\n\nFor more detailed information, you can refer to the following links:\n- [Manage Deployment Tracks for Choreo Components](https://wso2.com/choreo/docs/develop-components/manage-deployment-tracks-for-choreo-components/)\n- [Deploy a Containerized Application](https://wso2.com/choreo/docs/develop-components/deploy-a-containerized-application/)\n- [CI/CD](https://wso2.com/choreo/docs/choreo-concepts/ci-cd/)"}
{"question": "Where does Choreo expect to find the code or build instructions for a component?", "answer": "Choreo expects to find the code or build instructions for a component in a specific directory path within a Git repository. Each component is attached to this directory, which either contains the source code of your application or a Dockerfile that includes the necessary build instructions.\n\nWhen you connect a Git repository to Choreo, it can either contain:\n- **Ballerina source code**: This is typically used for components designed as microservices or APIs.\n- **A Docker project**: In this case, the repository must include a Dockerfile that specifies the instructions for building the Docker image, as well as a build context which is a set of files necessary for the build process.\n\nThis setup allows Choreo to deploy, manage, and scale each component independently, as each component maps to a single pod in the Kubernetes cluster during deployment.\n\nFor more detailed information, you can refer to the following documentation:\n- [Choreo Concepts: Component](https://wso2.com/choreo/docs/choreo-concepts/component/)\n- [Develop Components With Git](https://wso2.com/choreo/docs/develop-components/develop-components-with-git/)"}
{"question": "What are some examples of the different types of components Choreo supports?", "answer": "Choreo supports various types of components that cater to different use cases in cloud-native application development. The main component types include:\n\n1. **Services**: These are microservices or APIs that handle specific functionalities. They can be deployed independently and are often designed to perform a particular task or set of tasks.\n\n2. **API Proxies**: These act as intermediaries for API requests, allowing for mediation policies and other configurations to be applied. They enable secure access to backend services.\n\n3. **Integrations**: These components allow for connecting and integrating different services or applications, facilitating data exchange and communication between them.\n\n4. **Web Applications**: Components designed to serve web applications, providing user interfaces and handling user requests through web protocols.\n\n5. **Webhooks**: These are user-defined HTTP callbacks that allow services to provide real-time information to other services upon certain events.\n\n6. **Scheduled Tasks**: Components that execute jobs or tasks based on a specified schedule, often configured using cron expressions.\n\n7. **Manual Tasks**: These involve tasks that may require human intervention or manual execution within the application's workflow.\n\nEach component type in Choreo is designed with unique features based on its characteristics, allowing developers to deploy, manage, and scale them independently within a Kubernetes cluster.\n\nFor further details, you can explore the documentation [here](https://wso2.com/choreo/docs/choreo-concepts/component/)."}
{"question": "Do different component types in Choreo offer unique features?", "answer": "Yes, different component types in Choreo offer unique features tailored to their specific purposes. Each component type is designed to handle distinct use cases, which influences its features and functionalities. Here are some examples of how they differ:\n\n1. **Service**: This component typically exposes multiple endpoints and can support various protocols like REST, GraphQL, gRPC, etc. Services can provide different entry points for interaction, which can include specifications like OpenAPI or GraphQL schemas.\n\n2. **Integrations**: Similar to services, integrations can also expose multiple endpoints, but they are often used to connect different services or applications together.\n\n3. **Scheduled Integrations**: This component type allows you to configure cron expressions to schedule jobs or tasks, making it suitable for tasks that need to run at specific intervals.\n\n4. **Web Applications**: These components are specifically designed to serve web content and might include features related to web hosting and user interface interactions.\n\n5. **Manual Tasks**: These are designed for executing tasks that may not require continuous running, ideal for operations that are not triggered by events or schedules.\n\n6. **Test Runner**: This component is specifically for running automated tests against other deployed components, allowing developers to evaluate applications in different environments.\n\nEach of these component types is associated with specific configurations and capabilities, allowing for flexibility in how applications are constructed and deployed in Choreo.\n\nFor more detailed information, you can refer to the [Choreo Component Documentation](https://wso2.com/choreo/docs/choreo-concepts/component/)."}
{"question": "Can I manage and scale different parts of my application independently within Choreo?", "answer": "Yes, Choreo can manage and scale different parts of an application independently. In Choreo, each component represents a single unit of work, such as a microservice, API, or job/task. Each component is deployed as a separate entity, which means you can deploy, manage, and scale each component independently. \n\nChoreo utilizes Kubernetes to handle the deployment of components, with each component mapping to a single pod in the Kubernetes cluster. This architecture allows for independent scaling based on the demand for each component. For instance, if one component requires more resources due to increased traffic, it can be scaled up without affecting the other components in the application.\n\nAdditionally, Choreo supports features like **scale-to-zero**, which allows applications to scale down to zero when not in use, thus optimizing resource usage. When a request comes in after a period of inactivity, the application can scale back up to handle the request, ensuring efficient management of resources.\n\nOverall, Choreo's architecture and capabilities facilitate the independent management and scaling of application components, making it suitable for cloud-native applications.\n\nFor more details, you can refer to the following documentation:\n- [Component](https://wso2.com/choreo/docs/choreo-concepts/component/)\n- [Autoscale Components with Scale-to-Zero](https://wso2.com/choreo/docs/devops-and-ci-cd/autoscale/autoscale-components-with-scale-to-zero/#architecture)"}
{"question": "What are 'Connections' in Choreo and why would I use them?", "answer": "In Choreo, **Connections** are a fundamental feature that allows you to integrate and share services, enhancing the efficiency of building applications. Connections enable you to link your service with other services on Choreo or even with external resources, facilitating the creation of integrated solutions.\n\n### Types of Connections\n\n1. **Component Connections**: \n   - These are defined at the component level and are exclusive to that specific component.\n   - They are useful for connecting a component to a legacy service or other Choreo services.\n   - If a component utilizes multiple Choreo services, connections can share the same OAuth application by using the same client ID and secret.\n\n2. **Project Connections**: \n   - These connections are created at the project level and can be utilized by any component within that project.\n   - They are ideal for sharing services like third-party APIs across multiple components in a project.\n   - Project connections under the OAuth security scheme will also share the same OAuth application across all components that reuse them.\n\n### Benefits of Using Connections\n\n- **Reusability**: By creating connections, services can be reused across different components and projects, reducing duplication and saving time.\n- **Ease of Maintenance**: The connection parameters can be set up to be loosely coupled with the service implementation. This means that changes to the connection parameters do not require changes in the service code, making it easier to maintain.\n- **Dynamic Configuration**: Choreo dynamically injects connection parameter values into environment variables at runtime, ensuring flexibility in how services are connected.\n- **Integrated Development**: Connections enable seamless integration of various services, making it easier to create complex applications that leverage multiple resources.\n\nOverall, using connections in Choreo accelerates the development process and enhances the overall efficiency of building integrated applications.\n\nFor more detailed information on creating and using connections, you can refer to the documentation on [Connections](https://wso2.com/choreo/docs/choreo-concepts/connections/)."}
{"question": "How do I use a Connection in my service once it's created in Choreo?", "answer": "To use a Connection in your service after it has been created in Choreo, follow these steps:\n\n### Step 1: Add Connection Configurations\nIntegrate the connection into your service by modifying the `component.yaml` file of your service. Depending on the version of the `component.yaml` you are using, the steps will differ slightly.\n\n#### For `component.yaml v1.1`:\n1. Add the following snippet to the `component.yaml` file:\n   ```yaml\n   dependencies:\n     connectionReferences:\n     - name: <CONNECTION_NAME>\n       resourceRef: <RESOURCE_IDENTIFIER>\n   ```\n   - Replace `<CONNECTION_NAME>` with the name of your connection.\n   - Replace `<RESOURCE_IDENTIFIER>` with a unique identifier for the service being connected to.\n\n2. If you have an existing `connectionReferences` section, append this configuration.\n\n3. Upon deployment, Choreo will create a subscription if applicable, and the required configurations will be automatically injected into the Choreo-defined environment variables.\n\n#### For `component.yaml v1.0` (Legacy):\n1. Add the following snippet to the `component.yaml` file:\n   ```yaml\n   dependencies:\n     serviceReferences:\n     - name: <SERVICE_NAME>\n       connectionConfig: <CONNECTION_ID>\n       env:\n       - from: ServiceURL\n         to: <YOUR_ENV_VARIABLE_NAME_HERE>\n       - from: ConsumerKey\n         to: <YOUR_ENV_VARIABLE_NAME_HERE>\n       - from: ConsumerSecret\n         to: <YOUR_ENV_VARIABLE_NAME_HERE>\n       - from: TokenURL\n         to: <YOUR_ENV_VARIABLE_NAME_HERE>\n       - from: ChoreoAPIKey\n         to: <YOUR_ENV_VARIABLE_NAME_HERE>\n   ```\n   - Replace `<SERVICE_NAME>` with the name of the service you are connecting to, and `<CONNECTION_ID>` with the unique connection identifier.\n\n2. Replace `<YOUR_ENV_VARIABLE_NAME_HERE>` with the names you want to use for the environment variables.\n\n### Step 2: Read Configurations within the Application\nYou can access the connection parameters in your application code using environment variables. For instance, in Node.js, you would read the configurations as follows:\n```javascript\nconst serviceURL = process.env.CHOREO_<CONNECTION_NAME>_SERVICEURL;\n```\n\n### Step 3: Acquire an OAuth 2.0 Access Token (if applicable)\nIf your service requires OAuth 2.0 authentication, you'll need to obtain an access token. You can do this by making a request to the token endpoint with your consumer key and secret.\n\n### Step 4: Invoke the Service\nOnce you have the necessary configurations and access token, you can make HTTP requests to the connected service. Depending on your authentication method, the request may look like this:\n\n- For API Key security:\n```javascript\nconst response = await axios.get(`${serviceURL}/{RESOURCE_PATH}`, {\n  headers: {\n    'Choreo-API-Key': `${choreoApiKey}`\n  }\n});\n```\n\n- For OAuth 2.0:\n```javascript\nconst response = await axios.get(`${serviceURL}/{RESOURCE_PATH}`, {\n  headers: {\n    'Authorization': `Bearer ${accessToken}`\n  }\n});\n```\n\nBy following these steps, you can successfully use a Connection in your service within Choreo.\n\nFor more detailed information, you can refer to the documentation here: [Use a Connection in Your Service](https://wso2.com/choreo/docs/develop-components/sharing-and-reusing/use-a-connection-in-your-service/)."}
{"question": "What are the benefits of using Choreo's Connections for integrating services?", "answer": "Using Choreo's Connections for integrating services offers several benefits that enhance development efficiency and streamline application integration. Here are the key advantages:\n\n1. **Accelerated Development**: Choreo allows you to share and reuse services, which speeds up the development process. By integrating existing services through Connections, developers can focus on building new functionalities rather than starting from scratch.\n\n2. **Seamless Integration**: Connections provide a uniform method to integrate both Choreo-hosted services and external resources. This flexibility enables developers to easily link different components in their applications, facilitating a more cohesive architecture.\n\n3. **Dynamic Configuration**: When you create a connection, Choreo provides a Connection ID along with connection parameters. These parameters can be mapped to environment variables in your service, which allows for dynamic retrieval of values at runtime. This design ensures that service connections remain loosely coupled, making maintenance and updates easier.\n\n4. **Visibility Levels**: Connections can be created with different visibility levelsâ€”either project-wide or component-specific. This feature allows for more controlled access to services, ensuring that only relevant components can utilize specific connections.\n\n5. **Ease of Maintenance**: The separation of connection parameters from the service logic allows developers to modify connection details without altering the core service code. This leads to improved maintainability and reduces the risk of errors during updates.\n\n6. **Support for Multiple Authentication Mechanisms**: Choreo supports various authentication schemes, making it easier to manage secure connections to services based on the application's requirements.\n\nIn summary, Choreo's Connections not only foster faster development cycles but also provide a flexible, maintainable, and secure way to integrate services effectively.\n\nFor more detailed information, you can refer to the following documentation: [Use a Connection in Your Service](https://wso2.com/choreo/docs/develop-components/sharing-and-reusing/use-a-connection-in-your-service/) and [Connections](https://wso2.com/choreo/docs/choreo-concepts/connections/)."}
{"question": "What's the difference between Project Connections and Component Connections in Choreo?", "answer": "In Choreo, there are two types of connections: Project Connections and Component Connections, each serving distinct purposes within your projects.\n\n### Project Connections\n- **Scope**: These connections are created at the project level.\n- **Usage**: They can be utilized by any component within the same project. This makes it convenient to share services across multiple components.\n- **Example**: If you need to integrate a third-party service like Twilio across various components in your project, you would create a Project Connection. All components can then refer to this connection using its connection ID.\n- **OAuth Application**: When Project Connections are used to consume Choreo services under the OAuth security scheme, they share the same OAuth application, meaning all components using this connection will employ the same client ID and client secret.\n\nFor more details, you can refer to the [Project Connections documentation](https://wso2.com/choreo/docs/choreo-concepts/connections/#project-connections).\n\n### Component Connections\n- **Scope**: These connections are defined at the individual component level.\n- **Usage**: They are exclusive to the component in which they are created, meaning other components in the project cannot use them.\n- **Example**: If you need a specific component to connect to a legacy service, you would create a Component Connection that only that component can utilize.\n- **OAuth Application**: Similar to Project Connections, if a Component Connection consumes Choreo services under the OAuth security scheme, it can also share the same OAuth application by using the same client ID and secret among multiple Component Connections within the same component.\n\nFor additional information, you can check the [Component Connections documentation](https://wso2.com/choreo/docs/choreo-concepts/connections/#component-connections).\n\n### Summary of Differences\n- **Visibility**: Project Connections are available to all components in a project, while Component Connections are limited to a single component.\n- **Purpose**: Use Project Connections for shared services across multiple components; use Component Connections for service integrations specific to a single component.\n\nThese distinctions help in organizing and managing connections effectively in Choreo, ensuring that the right services are accessible to the appropriate components."}
{"question": "When should I use a Project Connection instead of a Component Connection? Can you give an example?", "answer": "In Choreo, there are two types of connections: **Project Connections** and **Component Connections**. Each serves a different purpose depending on the scope of usage within your projects.\n\n### Project Connections\n- **Definition**: Project Connections are created to connect to services within a specific project. These connections can be utilized by any component within that project.\n- **Use Case**: If you have a third-party service, like Twilio, that you want to make available to all components in your project, you would create a Project Connection. This allows all components to reuse the same connection without needing to create individual connections for each component.\n- **Example**: If you are building multiple microservices that all need access to the same external API, you can define a Project Connection for that API. All services can reference this single connection ID, simplifying management and reducing redundancy.\n\n### Component Connections\n- **Definition**: Component Connections, on the other hand, are defined at the component level and are only used by that specific component.\n- **Use Case**: If a component requires a unique connection to a service that is not shared with other components, you would create a Component Connection. This is useful for services that are specific to a particular functionality or that do not need to be exposed to other components.\n- **Example**: Consider a scenario where you have a legacy service that only one component needs to connect to. In this case, you would create a Component Connection specifically for that component, allowing it to interact with the legacy service without exposing that connection to other components in the project.\n\n### Summary of Differences\n- **Scope of Use**: \n  - Project Connections are reusable across all components within the same project.\n  - Component Connections are limited to the specific component that created them.\n  \n- **Ideal Scenarios**:\n  - Use **Project Connections** for shared resources or services that multiple components will use.\n  - Use **Component Connections** for services or resources that are exclusive to a single component.\n\nFor more detailed information, you can refer to the respective sections in the Choreo documentation:\n- [Project Connections](https://wso2.com/choreo/docs/choreo-concepts/connections/#project-connections)\n- [Component Connections](https://wso2.com/choreo/docs/choreo-concepts/connections/#component-connections)"}
{"question": "When is it more appropriate to use a Component Connection?", "answer": "In Choreo, **Component Connections** are designed for use at the component level, meaning they are utilized exclusively by a specific component. Here are some scenarios where it is more appropriate to use a Component Connection:\n\n1. **Isolated Dependencies**: If your component requires a connection to a service (like a legacy service) that is not shared with other components, defining a Component Connection is ideal. This ensures the connection is tightly coupled with that specific component and does not affect or interfere with other components.\n\n2. **Multiple Connections**: If your component needs to consume multiple Choreo services, you can create Component Connections for each service. Notably, if these services use the OAuth security scheme, they can share the same OAuth application by using the same client ID and secret, simplifying authentication management.\n\n3. **No Cross-Component Sharing Needed**: When you do not intend for the connection to be reused across different components within the same project, a Component Connection is the best choice. This keeps your component's dependencies self-contained.\n\nFor example, if you are building a component that integrates with a specific database or an external API and you want to keep that integration unique to that component, using a Component Connection would be the most appropriate approach.\n\nFor more detailed information about Component Connections, you can refer to the documentation [here](https://wso2.com/choreo/docs/choreo-concepts/connections/#component-connections)."}
{"question": "How do Project Connections handle OAuth security when shared across multiple components?", "answer": "In Choreo, when sharing Project Connections among multiple components, OAuth security is handled in a cohesive manner to streamline the authentication process across the various components. Here's how it works:\n\n### Project Connections\n- **Definition**: Project Connections are connections created to link to services within a specific project. These connections can be reused by any component within that project.\n- **OAuth Application Sharing**: When Project Connections are set up to consume services secured with OAuth, they utilize a shared OAuth application across the project. This means that all components that refer to this Project Connection will use the same **client ID** and **client secret**.\n\n### Benefits of Shared OAuth Security\n1. **Simplified Management**: By sharing the same OAuth credentials (client ID and secret) across components, it simplifies the management of OAuth configurations. You don't need to manage separate credentials for each component.\n2. **Consistent Security**: All components using the Project Connection will adhere to the same security policies defined by the OAuth application, ensuring consistent security practices throughout the project.\n\n### Implementation Steps\n- To set up a Project Connection with OAuth security:\n  1. Create the Project Connection in the Choreo console.\n  2. Configure it to consume the desired Choreo services with the OAuth scheme.\n  3. Use the connection ID in your components to refer to this shared connection.\n\n### Accessing Services\nWhen a component needs to access a service through the Project Connection:\n- It will authenticate using the shared client ID and client secret.\n- The component can then make calls to the secured service without needing to implement the OAuth flow individually.\n\nThis approach enhances security and reduces complexity in managing OAuth tokens and credentials across multiple components.\n\nFor further details, you can refer to the documentation on Project Connections [here](https://wso2.com/choreo/docs/choreo-concepts/connections/#project-connections)."}
{"question": "If my component consumes multiple Choreo services, can Component Connections help with OAuth?", "answer": "Yes, Component Connections in Choreo can facilitate OAuth authentication for components that consume multiple services. When you create Component Connections for your component to consume various Choreo services under the OAuth security scheme, you can reuse the same OAuth application by sharing the same client ID and secret across all such connections. This allows for efficient management of OAuth authentication since you don't need to create separate OAuth applications for each service your component consumes.\n\nIn summary, you can connect to multiple services using a single OAuth application, thereby streamlining the authentication process for your component. \n\nFor more details, you can refer to the documentation on [Component Connections](https://wso2.com/choreo/docs/choreo-concepts/connections/#component-connections)."}
{"question": "What are the core components of Choreo's architecture?", "answer": "Choreo's architecture consists of two core components: the **control plane** and the **data plane**.\n\n### Control Plane\n- The control plane is responsible for managing organizations, users, and projects. It oversees the entire application development lifecycle, including creation, deployment, governance, and observability. \n- It is a Software as a Service (SaaS) model that manages cloud and private data planes, catering to various user personas such as architects, developers, DevOps, and site reliability engineers.\n\n### Data Plane\n- The data plane is where user applications are deployed based on configurations from the control plane. This includes a variety of application types, such as services, web applications, APIs, integrations, and scheduled tasks, supporting a polyglot development approach.\n- There are two types of data planes:\n  - **Cloud Data Plane**: Utilizes a multi-tenanted infrastructure model for deploying applications, providing a secure shared environment.\n  - **Private Data Plane (PDP)**: Offers dedicated infrastructure for a single organization, ensuring enhanced privacy and control.\n\nIn summary, the control plane focuses on governance and management, while the data plane is where the applications run, ensuring that user data is contained and secured.\n\nFor more details, you can refer to the documentation [here](https://wso2.com/choreo/docs/choreo-concepts/data-planes/)."}
{"question": "What is the primary role of the Choreo control plane?", "answer": "The primary role of the Choreo control plane within the Choreo platform is to serve as a centralized management component that oversees and coordinates all workloads deployed by customers. It carries out several essential functions, including:\n\n1. **Administration**: The control plane manages organizations, users, and projects, providing a unified point of control for administrators.\n2. **Application Development Journey**: It governs the entire application development process, from creation through to deployment. This includes enforcing governance measures and ensuring observability throughout the development lifecycle.\n3. **Resource Management**: It allows administrators to efficiently manage, monitor, and orchestrate the organization's resources, enabling a better overview and control of the deployed applications.\n\nThe Choreo control plane is a Software as a Service (SaaS) offering that manages both cloud and private data planes, catering to various user personas such as CIOs, architects, developers, and DevOps engineers.\n\nFor more detailed information, you can refer to the following documentation link: [Choreo Control Plane Overview](https://wso2.com/choreo/docs/choreo-concepts/data-planes/)."}
{"question": "Who are the typical users or personas that interact with the Choreo control plane?", "answer": "The typical users or personas that interact with the Choreo control plane include:\n\n1. **CIOs** - Chief Information Officers who oversee the IT strategy and implementation.\n2. **Architects** - Professionals responsible for the design and structure of the technology systems.\n3. **Developers** - Individuals who develop, deploy, and manage applications and services.\n4. **DevOps Engineers** - Team members focused on the integration of development and operations, enhancing deployment processes.\n5. **Site Reliability Engineers (SREs)** - Engineers who ensure that the services are reliable and scalable.\n6. **Platform Engineers** - Specialists who build and maintain the platform on which services run.\n\nThe control plane plays a crucial role in managing organizations, users, and projects, as well as overseeing the application development lifecycle, from creation to deployment, while enforcing governance and providing observability.\n\nFor more details, you can refer to the documentation on [Data Planes](https://wso2.com/choreo/docs/choreo-concepts/data-planes/)."}
{"question": "What exactly is a Choreo data plane, and what types of applications can be deployed there?", "answer": "Choreo's data plane is a computing environment specifically designed for running user applications. It operates based on configurations set in the Choreo control plane, which manages the overarching aspects of application development, deployment, governance, and observability. The data plane ensures that all traffic related to the runtime of user applications is contained within its boundaries, thereby maintaining the privacy and security of user data.\n\n### Types of Applications Deployable on Choreo Data Plane\n\nChoreo supports a variety of application types that can be deployed on its data planes. These include:\n\n1. **Services**: These are backend components that provide specific functionalities or data.\n2. **Web Applications**: Full-fledged applications that run in web browsers, often involving user interactions.\n3. **APIs**: These allow different software applications to communicate with each other.\n4. **Integrations**: Applications that connect different systems or services to work together.\n5. **Scheduled Tasks**: Automated tasks that run at specified intervals.\n6. **Manual Tasks**: Tasks that require human intervention to execute.\n7. **Event Handlers**: Components that respond to specific events or triggers in the system.\n8. **Test Runners**: Tools used to execute automated tests on applications.\n\nChoreo supports a polyglot approach, meaning that applications can be written in various programming languages, such as Java, Go, NodeJS, Python, and others. \n\nChoreo's architecture provides two types of data planes:\n- **Cloud Data Planes**: These utilize a multi-tenant infrastructure model, offering a shared yet secure environment for application runtime.\n- **Private Data Planes (PDP)**: These provide dedicated infrastructure for a single organization, ensuring enhanced privacy and control.\n\nFor more detailed information, you can refer to the following documentation:\n- [Choreo Data Planes](https://wso2.com/choreo/docs/choreo-concepts/data-planes/)\n- [Deploy a Containerized Application](https://wso2.com/choreo/docs/develop-components/deploy-a-containerized-application/)"}
{"question": "How does Choreo ensure the security and containment of my application's runtime data and traffic?", "answer": "Choreo ensures the security of application runtime data and traffic through a combination of infrastructure, protocols, and various security measures. Here's a comprehensive overview of how Choreo achieves this:\n\n### 1. **Data Management and Infrastructure**\nChoreo utilizes WSO2 containers and Kubernetes clusters for managing data. This setup provides scalability, resilience, and enhanced security. The architecture consists of both control planes and data planes, with the data plane specifically designed to restrict all traffic related to the runtime of user applications to its boundaries, ensuring that user data remains contained.\n\n### 2. **Private Data Planes**\nChoreo's private data planes (PDPs) can be deployed on major cloud providers or on-premises, allowing organizations to have dedicated infrastructure for their applications. This configuration offers an additional layer of privacy and control, particularly important for organizations with stringent security requirements. \n\n### 3. **Security Measures**\nChoreo implements several key security protocols and measures, including:\n\n- **End-to-End Encryption**: All communication between the control plane and the private data plane is secured using TLS (Transport Layer Security). This ensures that data in transit is encrypted and protected from interception.\n\n- **Firewall Protection**: Incoming traffic is protected by a firewall, and all requests must undergo authentication and authorization via the API Gateway.\n\n- **Zero-Trust Network Security**: Choreo adopts a zero-trust approach, meaning that no internal traffic is assumed to be secure. Each request is authenticated, and stringent checks are in place to prevent unauthorized access.\n\n### 4. **Observability and Compliance**\nChoreo's observability architecture is designed to enhance security by minimizing data exposure points. Logs and observability data are retained within the data plane itself, ensuring compliance with regulations such as GDPR and CCPA. Users have direct access to their data within the data plane, enhancing both security and performance.\n\n### 5. **Vulnerability Scanning**\nChoreo incorporates a security vulnerability scanning process during deployment using tools like Trivy. This process scans for critical vulnerabilities in third-party libraries, halting the deployment if any vulnerabilities are detected, thereby ensuring that only secure components are deployed.\n\n### 6. **Secure Connectivity**\nFor secure access to private networks from the Choreo cloud data plane, Choreo utilizes Tailscale, which allows for peer-to-peer WireGuard connections. This adds a layer of security for applications that need to communicate with external services.\n\n### Conclusion\nChoreo's multi-layered security approach, from infrastructure and data management to encryption and vulnerability scanning, ensures that application runtime data and traffic are safeguarded against various security threats. For more detailed information, you can refer to the following documentation links:\n- [Security and Data Protection FAQ](https://wso2.com/choreo/docs/references/faq/#security-and-data-protection)\n- [Private Data Planes](https://wso2.com/choreo/docs/choreo-concepts/data-planes/#private-data-planes)\n- [Configure VPNs on the Choreo Cloud Data Plane](https://wso2.com/choreo/docs/devops-and-ci-cd/configure-vpns-on-the-choreo-cloud-data-plane/)"}
{"question": "What are the two different types of data planes offered by Choreo, and how do they differ?", "answer": "Choreo offers two distinct types of data planes: **cloud data planes** and **private data planes**. Hereâ€™s how they differ:\n\n1. **Cloud Data Planes (CDP)**:\n   - The cloud data plane utilizes a **multi-tenanted infrastructure model**, which means multiple users can share the same resources while maintaining a secure environment for their applications.\n   - This setup allows for cost-effectiveness and ease of management, as the infrastructure is maintained by Choreo.\n\n2. **Private Data Planes (PDP)**:\n   - In contrast, the private data plane provides **dedicated infrastructure** specifically for a single organization. This setup offers an enhanced level of privacy and control, which is particularly beneficial for organizations with specific compliance and security requirements.\n   - Private data planes can be deployed on major cloud providers like Azure, AWS, and GCP, or even on-premises, allowing for flexibility in infrastructure management.\n\n### Summary of Differences:\n- **Infrastructure Model**: \n  - Cloud data planes are multi-tenant.\n  - Private data planes are dedicated to a single organization.\n  \n- **Environment**:\n  - Cloud data planes offer a shared environment.\n  - Private data planes provide a customizable environment tailored to the organizationâ€™s needs.\n\n- **Control and Privacy**:\n  - Cloud data planes offer less control due to shared resources.\n  - Private data planes enhance privacy and control, suitable for sensitive applications.\n\nFor more detailed information on data planes, you can refer to the documentation [here](https://wso2.com/choreo/docs/choreo-concepts/data-planes/)."}
{"question": "Where can I deploy a Choreo private data plane (PDP)?", "answer": "You can deploy a Choreo private data plane (PDP) in various environments, including:\n\n1. **Cloud Providers**: Choreo private data planes can be deployed with almost all major cloud providers, such as:\n   - Azure\n   - AWS\n   - Google Cloud Platform (GCP)\n\n2. **On-Premises Infrastructure**: It is also possible to deploy a PDP on your own on-premises infrastructure.\n\n### Essential Requirements for Deployment\nTo successfully set up a Choreo private data plane, you need to ensure that the following essential components are in place:\n- **Upstream-Compatible Kubernetes Clusters**: The infrastructure should support Kubernetes.\n- **Container Registry**: This is necessary for managing your container images.\n- **Key Vault (Secret Store)**: For managing secrets and sensitive information.\n- **Logging Service or Log Storage**: To store and manage logs generated by the PDP.\n\n### Management Models\nChoreo supports several management models for private data planes:\n- **WSO2 Fully Managed Model**: Infrastructure and PDP managed by WSO2.\n- **Customer Self-Managed Model**: WSO2 provides the installation script and updates, but the customer manages the infrastructure.\n  \nFor more details, you can refer to the following sections in the documentation:\n- [Private Data Plane Overview](https://wso2.com/choreo/docs/choreo-concepts/data-planes/#private-data-planes)\n- [Private Data Plane Management Models](https://wso2.com/choreo/docs/references/private-data-plane-management-models/) \n\nThese resources will provide you with comprehensive insights into deploying and managing a Choreo private data plane."}
{"question": "What are the essential infrastructure requirements for setting up a private data plane?", "answer": "To set up a private data plane in Choreo, there are several essential infrastructure requirements that need to be met:\n\n1. **Kubernetes Clusters**: You need upstream-compatible Kubernetes clusters. This is where the Choreo components will be deployed.\n\n2. **Container Registry**: A container registry is required to store and manage the container images used by your applications.\n\n3. **Key Vault (Secret Store)**: You will need a secure storage solution for managing sensitive information such as API keys, passwords, and other secrets.\n\n4. **Logging Service or Log Storage**: A logging service or dedicated storage for logs is necessary for monitoring and troubleshooting purposes.\n\nThese requirements can be deployed across major cloud providers such as Azure, AWS, and GCP, or on-premises infrastructure. \n\nAdditionally, when setting up the Choreo private data plane, you will install various software components using a Helm installation on the Kubernetes infrastructure. This includes components such as Cilium CNI, Choreo API Gateways, and observability agents.\n\nFor more detailed insights on the architecture and requirements, you can refer to the documentation here: [Private Data Planes](https://wso2.com/choreo/docs/choreo-concepts/data-planes/#private-data-planes)."}
{"question": "How are the system components installed in a Choreo private data plane?", "answer": "To install system components in a Choreo private data plane (PDP), you will primarily use Helm to deploy these components on your Kubernetes infrastructure. Below is a structured overview of the process:\n\n### Prerequisites\n1. **Infrastructure Requirements**:\n   - Ensure you have upstream-compatible Kubernetes clusters.\n   - A container registry, a key vault (secret store), and a logging service or log storage must be set up.\n\n### Installation Process\n1. **Helm Installation**: \n   - Use Helm to set up the Choreo PDP system. This involves executing commands that will deploy the necessary software components onto your Kubernetes clusters.\n\n2. **Components Installed**:\n   During the Helm installation, the following components will be deployed:\n   - **Cilium CNI** and service mesh.\n   - **Choreo API Gateways** and related components.\n   - **Choreo PDP agent**.\n   - **Observability and logging APIs**, along with observability agents.\n   - **Flux controller** for automatic updates, including security patches and bug fixes.\n\n3. **Connectivity with Control Plane**:\n   - The private data plane must communicate with the Choreo control plane to manage various activities. Ensure that outbound traffic from the private data plane is allowed to the public IP range of the Choreo control plane if your organization's network restricts outbound traffic.\n\n### Security \n- Ensure that all communications between the control plane and the private data plane are secured using TLS.\n\n### Management Models\nYou can choose from different management models for your private data plane:\n- **Customer self-managed**: You will handle installation and updates with provided scripts.\n- **WSO2 fully managed**: WSO2 handles the infrastructure and management, available in either WSO2 subscription or customer subscription models.\n\nFor more detailed information regarding the installation of system components in a Choreo private data plane, you can refer to the [Private Data Planes documentation](https://wso2.com/choreo/docs/choreo-concepts/data-planes/#private-data-planes) and the [Private Data Plane Management Models documentation](https://wso2.com/choreo/docs/references/private-data-plane-management-models/#customer-self-managed-wso2-provides-installation-script-and-updates-model)."}
{"question": "What specific software components are installed when setting up a Choreo private data plane?", "answer": "When setting up a Choreo private data plane (PDP), several specific software components are installed using a Helm installation on the Kubernetes infrastructure. The components include:\n\n1. **Cilium CNI and service mesh** - This is responsible for networking within the Kubernetes cluster.\n2. **Choreo API Gateways and related components** - These handle API requests and management.\n3. **Choreo PDP agent** - This agent facilitates communication and management functionalities within the data plane.\n4. **Observability and logging APIs** - These components enable logging and observability features, along with their respective observability agents.\n5. **Flux controller** - This controller manages updates and configurations of the installed components.\n\nAll these components receive automatic updates, including security patches and bug fixes, through the Flux controller connected to the Choreo Update Management System.\n\nFor more detailed information, you can refer to the documentation [here](https://wso2.com/choreo/docs/choreo-concepts/data-planes/#private-data-planes)."}
{"question": "How are updates, including security patches and bug fixes, managed for the software components within a private data plane?", "answer": "In Choreo, updates, including security patches and bug fixes, for software components within a private data plane are managed through a combination of automated updates and customer responsibilities, depending on the management model chosen.\n\n1. **Automatic Updates**: For components deployed in a private data plane, the updates are facilitated by the Flux controller, which is connected to the Choreo Update Management System. This mechanism ensures that all installed software components automatically receive updates, including security patches and bug fixes.\n\n2. **Customer Responsibilities**: Depending on the management model selected (e.g., customer self-managed, WSO2 fully managed), customers may also have responsibilities related to:\n   - Upgrading, patching, and debugging versions of the Choreo system components.\n   - Setting up and managing the deployment of these components via Helm.\n   - Monitoring the components for any required actions.\n\nIn a self-managed model, the customer is fully accountable for managing these updates, while in a fully managed model provided by WSO2, the responsibility for applying updates may lie more with WSO2.\n\n### Summary of Management Models:\n- **Customer Self-Managed**: Customers handle all updates and management activities.\n- **WSO2 Fully Managed (Infrastructure and PDP in WSO2 subscription)**: WSO2 manages updates and infrastructure.\n- **WSO2 Fully Managed (Infrastructure and PDP in Customer subscription)**: A shared responsibility model where both WSO2 and the customer manage different aspects.\n\nFor detailed information regarding the management models and how updates are handled, you can refer to the following documentation:\n- [Private Data Plane Management Models](https://wso2.com/choreo/docs/references/private-data-plane-management-models/#customer-self-managed-wso2-provides-installation-script-and-updates-model)"}
{"question": "Does the private data plane need to communicate with the Choreo control plane, and what are the network requirements for this communication?", "answer": "To enable communication between a private data plane (PDP) and the Choreo control plane, there are specific requirements and network setups that need to be established. Here are the key points to consider:\n\n### Infrastructure Requirements\n1. **Cloud Provider Compatibility**: The private data plane can be deployed on major cloud providers such as Azure, AWS, and GCP, or even on-premises.\n2. **Kubernetes Cluster**: An upstream-compatible Kubernetes cluster is essential for deploying the private data plane.\n3. **Container Registry**: A container registry is required for storing container images.\n4. **Key Vault**: A secret store is necessary to manage sensitive information securely.\n5. **Logging Service**: A logging service or log storage solution is needed for observability.\n\n### Communication Setup\n1. **Outbound Communications**: \n   - The private data plane primarily communicates **outbound** to the Choreo control plane.\n   - This means there is **no need to open any specific `IP:Port` from the private data plane's perspective** for these interactions.\n\n2. **Network Restrictions**: \n   - If there are restrictions on outbound traffic within the organization's network, it is crucial to allow outbound traffic to the public IP range of the Choreo control plane.\n\n3. **Secure Communication**: \n   - All communications between the private data plane and the Choreo control plane are secured using TLS.\n\n### Connection Details\nThe table below outlines the specific components and their communication requirements:\n\n| Data Plane Component | Endpoint                                     | Direction | Protocol |\n|----------------------|----------------------------------------------|-----------|----------|\n| Choreo PDP agent     | Choreo control plane (CP)                   | Outbound  | WSS      |\n|                      | Kubernetes API server                        | Outbound (cluster internal) | HTTPS, WS |\n| APIM/local adaptor    | Global adaptor                               | Outbound  | HTTPS    |\n|                      | Azure Service Bus (CP)                      | Outbound  | AMQP     |\n| APIM/Enforcer        | Event hub (CP)                              | Outbound  | AMQP     |\n| Choreo secret resolver| Cloud secret store                          | Outbound (VPC internal) | HTTPS    |\n| Container registry    | Container registry (public)                 | Inbound   | HTTPS    |\n|                      | Container registry                           | Outbound (VPC internal) | HTTPS    |\n| Certificate manager   | Azure DNS service                            | Outbound  | HTTPS    |\n|                      | LetsEncrypt                                  | Outbound  | HTTPS    |\n| Flux source controller| GitHub                                      | Outbound  | HTTPS    |\n| Flux Helm controller  | Choreo container registry                    | Outbound  | HTTPS    |\n\n### Summary\nTo summarize, setting up a private data plane for communication with the Choreo control plane involves ensuring the proper infrastructure is in place, allowing necessary outbound connections, and securing all communications. This setup allows for efficient management and orchestration of workloads within the Choreo ecosystem.\n\nFor more detailed information, you can refer to the [Private Data Plane documentation](https://wso2.com/choreo/docs/choreo-concepts/data-planes/#private-data-planes)."}
{"question": "How does Choreo ensure data privacy and compliance for logs and observability data within a private data plane?", "answer": "Choreo ensures data privacy and compliance for logs and observability data within a private data plane through several key architectural features:\n\n1. **Data Storage at Source**: Logs and observability data are stored directly within the private data plane. This approach enhances security by keeping sensitive data localized, simplifying access, and ensuring compliance with data protection regulations.\n\n2. **Direct Browser-to-Data-Plane Interaction**: The Choreo Console interacts directly with APIs in the data plane, which eliminates potential complexities associated with data routing through external networks. This direct interaction promotes a more secure flow of information.\n\n3. **Reduced Data Exposure Points**: By fetching data directly from the data plane's APIs, Choreo minimizes the number of data transfer points. This reduction decreases the likelihood of data exposure or interception during transmission.\n\n4. **Compliance with Regulatory Standards**: The architecture is designed to support data locality, aligning with global regulatory standards such as GDPR and CCPA, which require that personal data be kept within specified geographic boundaries.\n\n5. **Improved Performance and Real-Time Insights**: The direct interaction between the user's browser and the data plane allows for faster data retrieval, which is crucial for providing real-time insights.\n\n6. **User Transparency and Control**: Choreo offers users clear visibility into the location and access methods of their data, alongside granular control over who can access that data.\n\n7. **Security Measures**: All communications between the control plane and the private data plane are secured using TLS encryption, which further protects the data during transit.\n\nThese features collectively contribute to a robust framework for maintaining data privacy and compliance within Choreo's private data plane.\n\nFor more detailed information, you can refer to the official documentation on [Private Data Planes](https://wso2.com/choreo/docs/choreo-concepts/data-planes/#private-data-planes)."}
{"question": "What are the key security features implemented in the Choreo private data plane?", "answer": "The Choreo private data plane (PDP) includes several key security features designed to ensure the protection of applications and data. Here are the main security measures implemented in the Choreo private data plane:\n\n1. **Infrastructure and Architecture Security**:\n   - The private data plane can be deployed on major cloud providers (like Azure, AWS, GCP) and also supports on-premises setups, ensuring flexibility in security configurations.\n   - It operates using upstream-compatible Kubernetes clusters, enhancing security through container orchestration.\n\n2. **Traffic Protection**:\n   - All incoming traffic is protected by a firewall and must pass through authentication and authorization via the API Gateway.\n   - End-to-end encryption of network traffic is ensured using Cilium transparent encryption, which secures data in transit.\n\n3. **Automatic Security Updates**:\n   - The system components, including the Choreo PDP agent and API gateways, receive automatic updates for security patches and bug fixes through the Flux controller, ensuring that the environment is always up to date.\n\n4. **Data Storage and Compliance**:\n   - Logs and observability data are stored within the data plane, enhancing security and compliance with regulations like GDPR and CCPA by ensuring data locality.\n   - Direct browser-to-data-plane interactions reduce potential data exposure points, minimizing risks associated with data transfer.\n\n5. **Security Levels**:\n   - Choreo offers various security levels in its private data plane, including:\n     - **DDoS Protection**: Varying levels of DDoS protection are available across different tiers.\n     - **Data Encryption**: Both data in transit and at rest are encrypted.\n     - **Secret Management**: A dedicated system for managing sensitive information.\n     - **Static and Dynamic Security Testing**: Tools like Static Application Security Testing (SAST) and Docker image security scanning are included.\n\n6. **Zero-Trust Network Security**:\n   - The architecture is designed around zero-trust principles, ensuring that trust is never assumed, and that every request must be verified.\n\n7. **Controlled Admin Access**:\n   - Access to the private data plane is controlled, ensuring that only authorized personnel can perform administrative functions.\n\nFor more detailed information on the security features and levels supported in Choreo's private data plane, you can refer to the following documentation:\n- [Private Data Plane Security Levels](https://wso2.com/choreo/docs/references/private-data-plane-security-levels/)\n- [Private Data Planes](https://wso2.com/choreo/docs/choreo-concepts/data-planes/#private-data-planes)"}
{"question": "What are the different management models available for Choreo private data planes?", "answer": "Choreo supports three different management models for private data planes (PDPs), which cater to various operational and security requirements. Here are the available models:\n\n1. **Customer Self-Managed (WSO2 Provides Installation Script and Updates) Model**: \n   - In this model, the customer is primarily responsible for the management of the private data plane, including tasks such as creating subscriptions, network management, firewall rules, infrastructure provisioning, and monitoring. WSO2 provides the necessary installation scripts and updates to assist the customer in managing the infrastructure.\n\n2. **WSO2 Fully Managed (Infrastructure and PDP in Customer Subscription) Model**:\n   - This model allows WSO2 to manage the infrastructure while the customer retains the subscription. Responsibilities are shared between WSO2 and the customer, particularly regarding network management, firewall rules, and certain aspects of infrastructure monitoring. WSO2 takes charge of provisioning infrastructure components and monitoring system components.\n\n3. **WSO2 Fully Managed (Infrastructure and PDP in WSO2 Subscription) Model**:\n   - Here, WSO2 fully manages both the infrastructure and the private data plane. This model is only supported on cloud providers such as Azure, AWS, and GCP. WSO2 takes on most responsibilities, including subscription management, network management, infrastructure provisioning, and monitoring, while the customer primarily manages their applications.\n\nFor more detailed information on each management model, you can refer to the following link: [Private Data Plane Management Models](https://wso2.com/choreo/docs/references/private-data-plane-management-models/)."}
{"question": "What exactly are Deployment Tracks in Choreo and what's their main purpose?", "answer": "**Deployment Tracks** in Choreo are structured pathways designed to enhance the deployment experience of software components. They function similarly to advanced CI/CD pipelines, ensuring a seamless transition of components from their source code or prebuilt images to their intended destinations. This organized approach minimizes errors and challenges commonly encountered in deployment workflows.\n\n### Main Purposes of Deployment Tracks:\n\n1. **Streamlined Deployment**:\n   - Deployment Tracks provide a well-structured route for deploying software components. This organization helps in managing the deployment process more reliably and efficiently. By linking a deployment track to a specific branch in a GitHub repository, it facilitates deployments to various environments. \n   - When a pull request (PR) is merged, it can automatically trigger a deployment to the development environment, enhancing the workflow.\n\n2. **Efficient API Versioning**:\n   - Deployment Tracks play a crucial role in managing API versions, particularly for managed APIs. They allow for easy creation of new API versions while maintaining compatibility with previous versions. \n   - The versioning follows Semantic Versioning (SemVer), where developers only need to specify the major and minor versions for the API being delivered from a deployment track. This helps in reducing disruption for API consumers during updates.\n\nOverall, Deployment Tracks enhance both the organization of deployment processes and the management of API versions, benefiting both developers and consumers of APIs.\n\nFor more detailed information, you can refer to the documentation: [Deployment Tracks](https://wso2.com/choreo/docs/choreo-concepts/deployment-tracks/)."}
{"question": "Why should I use Deployment Tracks? What are the key benefits they offer?", "answer": "**Purpose of Deployment Tracks in Choreo**\n\nDeployment Tracks in Choreo serve as structured pathways designed to simplify the deployment of software components. They function similarly to advanced Continuous Integration/Continuous Deployment (CI/CD) pipelines, ensuring that your components reach their designated environments seamlessly, whether through source code or prebuilt images. This organized approach helps minimize errors and challenges commonly associated with deployment workflows.\n\n**Key Benefits of Using Deployment Tracks**\n\n1. **Streamlined Deployment Process**:\n   - Deployment Tracks provide well-structured routes for deploying your components, enhancing the organization and reliability of the deployment process.\n   - They enable automatic deployments linked to specific branches in a GitHub repository, allowing for easy management of deployments across various environments.\n   - Users can visualize deployments associated with a selected track on Choreo's Deploy page, which aids in tracking and management.\n\n2. **Efficient API Versioning**:\n   - Deployment Tracks are particularly beneficial for managed APIs, providing a straightforward method for creating versions that can interact smoothly with prior iterations.\n   - Choreo employs Semantic Versioning (SemVer) for API versioning, which simplifies the update process for both API creators and consumers. This ensures that changes do not disrupt API clients, as developers only need to specify the major and minor versions delivered from a deployment track.\n\n3. **Flexibility in CI/CD Strategies**:\n   - Users can choose between a comprehensive CI/CD integration approach or a Continuous Deployment (CD) only strategy, allowing customization to fit their development workflows. \n   - For those using their own CI systems, Deployment Tracks can be linked to a container registry for easy deployment of images, providing additional flexibility.\n\n4. **Independent Version Control**:\n   - Choreo allows the creation and management of dedicated deployment tracks for components, enabling independent version control and deployment strategies. \n   - Users can unlink or relink deployment tracks from associated branches, aligning their deployment strategies with preferred Git workflows.\n\nFor more detailed information, you can refer to the relevant documentation on [Deployment Tracks](https://wso2.com/choreo/docs/choreo-concepts/deployment-tracks/)."}
{"question": "How do Deployment Tracks integrate with a full CI/CD pipeline, especially if I'm using GitHub?", "answer": "Deployment Tracks in Choreo facilitate integration with CI/CD pipelines, particularly when using GitHub, by establishing clear pathways for component deployment. Here's how they work:\n\n### CI/CD Integration with Deployment Tracks\n1. **Branch Linkage**: Each deployment track is associated with a specific branch in your GitHub repository. This linkage allows for organized deployments to various environments.\n2. **Automatic Deployments**: You can configure deployment tracks to initiate automatic deployments. For instance, when a pull request (PR) is merged into the linked branch, it triggers a deployment to the development environment.\n3. **Visualization**: Choreo provides a visual representation of the deployments associated with your selected deployment track on the Deploy page, making it easier to manage and monitor your deployments.\n\n### CD-Only Strategy\nIf you prefer to utilize your own Continuous Integration (CI) systems, Deployment Tracks can also function as a Continuous Deployment (CD) pipeline. In this case, you can link deployment tracks directly to a container registry repository. This setup allows for seamless deployment of images from the registry without relying on Choreoâ€™s CI capabilities.\n\n### Benefits of Using Deployment Tracks\n- **Streamlined Process**: Deployment Tracks reduce errors and enhance the reliability of the deployment process, providing a structured approach.\n- **Efficient Versioning**: They also support efficient API versioning, which is beneficial for managing and interacting with different API versions.\n\nFor more detailed information about Deployment Tracks and their integration with CI/CD, you can refer to the following documentation:\n- [Deployment Tracks Overview](https://wso2.com/choreo/docs/choreo-concepts/deployment-tracks/#streamlined-deployments)\n- [Manage Deployment Tracks for Choreo Components](https://wso2.com/choreo/docs/develop-components/manage-deployment-tracks-for-choreo-components/)"}
{"question": "Can I use Deployment Tracks if I already have my own Continuous Integration (CI) system and only want Choreo for Continuous Deployment (CD)?", "answer": "Yes, Deployment Tracks in Choreo can be used solely for Continuous Deployment (CD) without using Choreo's Continuous Integration (CI). This can be achieved by linking deployment tracks directly to a container registry repository instead of a GitHub branch.\n\n### Steps to Achieve Continuous Deployment with Deployment Tracks:\n\n1. **Link Deployment Tracks to a Container Registry**: Instead of connecting a deployment track to a GitHub branch, you can link it to a container registry repository. This allows you to deploy images that are sourced directly from the container registry.\n\n2. **Configure Automatic Deployments**: With this configuration, you can set up your deployment track to automatically deploy the images as they are updated in the container registry. This eliminates the need for any CI processes in Choreo, focusing solely on the deployment aspect.\n\n### Benefits:\n- **Independence from CI**: By utilizing your own CI systems, you can continue to build and test your application outside of Choreo while still leveraging its deployment capabilities.\n- **Streamlined Deployment Process**: This approach simplifies the deployment workflow, allowing for faster and more efficient releases.\n\nFor more detailed information on how to manage deployment tracks and set them up for continuous deployment, you can refer to the documentation [here](https://wso2.com/choreo/docs/choreo-concepts/deployment-tracks/#streamlined-deployments)."}
{"question": "How do Deployment Tracks handle API versioning for service components in Choreo?", "answer": "In Choreo, Deployment Tracks play a significant role in handling API versioning for service components by adopting a systematic approach aligned with Semantic Versioning (SemVer). Here's how it works:\n\n### API Versioning Mechanism\nChoreo uses a versioning mechanism that focuses on the major and minor version numbers of APIs, which are prefixed with `v`. For example, an API version could be represented as `v1.2`.\n\n### Versioning Guidelines\nWhen managing API versions in Choreo, the following guidelines should be adhered to:\n- **Major Version Increment**: This should be done when there are incompatible changes made to the API.\n- **Minor Version Increment**: This should be performed when new functionalities are added in a backward-compatible manner.\n\n### Deployment Tracks and API Versioning\nWith Deployment Tracks, API developers only need to specify the major and minor versions being delivered from a particular deployment track. This specification functions as the API version attribute of that deployment track. Additionally, for internal tracking purposes, developers can utilize Git tags or GitHub releases to manage versioning.\n\nOverall, the combination of Deployment Tracks and a clear versioning strategy helps reduce disruptions for API consumers while allowing for continuous development and deployment of updates.\n\nFor more detailed information, you can refer to the relevant documentation [here](https://wso2.com/choreo/docs/choreo-concepts/deployment-tracks/#efficient-api-versioning)."}
{"question": "When should I increment the major versus the minor version of my API when using Deployment Tracks in Choreo?", "answer": "When using Deployment Tracks in Choreo for API versioning, the Semantic Versioning (SemVer) approach is employed, which focuses on managing major and minor versions effectively. Here's when to increment each version type:\n\n### Incrementing Major and Minor Versions\n\n1. **Major Version Increment**:\n   - You should increment the **major version** when you introduce **incompatible API changes**. These changes may break existing client integrations, requiring consumers to update their implementations to remain compatible with the new version.\n   - For example, if you change the structure of the API response or remove an endpoint, this would necessitate a major version change.\n\n2. **Minor Version Increment**:\n   - Increment the **minor version** when you add functionality in a **backward-compatible manner**. This means that existing clients can continue to function without any modifications while benefiting from new features.\n   - For instance, adding a new endpoint or introducing optional parameters to existing endpoints would require a minor version increment.\n\n### Version Format\nIn Choreo, the versioning format follows the pattern **`v{major}.{minor}`**, such as `v1.2`.\n\n### Context of Deployment Tracks\nWhen working with Deployment Tracks, only the major and minor versions need to be specified, as these serve as the version attributes for a deployment track. This design simplifies the management of API versions and improves the overall experience for both API creators and consumers.\n\nFor more information, you can refer to the documentation on efficient API versioning in Deployment Tracks: [Efficient API versioning](https://wso2.com/choreo/docs/choreo-concepts/deployment-tracks/#efficient-api-versioning)."}
{"question": "If Choreo's API versioning focuses on major and minor versions, how do I manage patch updates or internal version tracking?", "answer": "Choreo manages API versioning using a system based on Semantic Versioning (SemVer), focusing primarily on the major and minor versions. Here's how it works:\n\n1. **Versioning Mechanism**: In Choreo, the versioning format used is `vX.Y`, where `X` represents the major version and `Y` represents the minor version. \n   - Major versions are incremented when there are incompatible changes to the API.\n   - Minor versions are incremented when new functionality is added in a backward-compatible manner.\n\n2. **Patch Updates**: While the versioning system primarily focuses on major and minor versions, patch updates (which typically do not introduce breaking changes) can still be important from a consumer perspective. These patch updates are often categorized as changes that donâ€™t require significant communication to API consumers, as they should ideally not disrupt their API clients.\n\n3. **Deployment Tracks**: For deployment tracks, the API developer specifies only the major and minor versions. This means that when deploying a service, the versioning relevant to consumers is simplified to major and minor versions, ensuring that consumers are not affected by patch-level changes.\n\n4. **Internal Version Tracking**: For internal version tracking or for more granular version control, developers can utilize Git tags and GitHub releases. This means that while the public-facing API uses major and minor versioning for clarity and consumer stability, developers can track all changes, including patch updates, using internal tools and methodologies.\n\n5. **Marketplace Integration**: In the Choreo Marketplace, services are also displayed by their major version, ensuring that clients are always routed to the latest minor version available within that major version. This assists in maintaining continuity and stability for consumers while allowing developers to push minor updates.\n\nBy following this structured versioning approach, Choreo facilitates efficient API management that minimizes disruption for API consumers while allowing developers to manage their service versions effectively.\n\nFor more details on versioning in Choreo, you can refer to the relevant documentation here: [Efficient API versioning](https://wso2.com/choreo/docs/choreo-concepts/deployment-tracks/#efficient-api-versioning) and [Service versioning in the Choreo Marketplace](https://wso2.com/choreo/docs/choreo-concepts/choreo-marketplace/#service-versioning-in-the-choreo-marketplace)."}
{"question": "What exactly is an Endpoint in Choreo?", "answer": "An **endpoint** in Choreo is defined as a network-exposed function that resides within a component. Each service or integration component can expose one or more endpoints, and each of these endpoints acts as a unique entry point into the service. This means that different endpoints can provide various interfaces for interacting with your service, such as REST and GraphQL endpoints.\n\n### Role of Endpoints in API Management and Integrations\n\n1. **API Exposure**: Endpoints are crucial for exposing services to other services, integrations, or applications. They detail how a service can be consumed, including specifics like port number, protocol, and schema (e.g., OpenAPI specification or GraphQL schema).\n\n2. **Standardized Interaction**: By defining endpoints with specific attributes (such as port binding, protocol, and network visibility), Choreo enables standardized interaction with services. This ensures that other applications can easily discover and communicate with your service.\n\n3. **API Management**: Choreo allows for API management at the endpoint level, enabling lifecycle management and configuration of security settings for each endpoint. This includes capabilities like throttling, analytics, and monitoring, ensuring that APIs are secure and manageable.\n\n4. **Visibility Control**: Endpoints can be configured with different network visibility options (Project, Organization, Public), determining who can access them. This feature is vital for controlling access to your services and protecting sensitive information.\n\n5. **Managed APIs**: When endpoints are exposed as managed APIs, they are subject to Choreo's API management features, including lifecycle management and security policies. This allows for full control over how the APIs are utilized, monitored, and maintained.\n\nIn summary, endpoints play a critical role in both API management and integrations by providing clear, structured access points to your services, facilitating standardized interactions, and enabling robust management features.\n\nFor more detailed information on configuring endpoints in Choreo, you can refer to the documentation [here](https://wso2.com/choreo/docs/choreo-concepts/endpoint/)."}
{"question": "Do I need to provide a service contract for an endpoint in Choreo, and what happens if I don't?", "answer": "In Choreo, providing a service contract for an endpoint is optional, but it is highly recommended. Each endpoint in a component can have a service contract (such as OpenAPI or GraphQL SDL) associated with it, which serves to define how consumers can interact with the endpoint. \n\nIf you choose not to provide a service contract, Choreo defaults to a general contract represented by `/*` exposed on all HTTP verbs. This means that while the endpoint will still be accessible, it will lack the specificity and structured guidance that a proper service contract offers. This can lead to confusion for consumers regarding how to properly interact with the endpoint, as they wonâ€™t have a clear understanding of the expected request and response formats.\n\nIn summary:\n- **Service Contract**: Defines how consumers interact with an endpoint.\n- **Default Behavior**: If not provided, Choreo uses a generic contract, which may not be as informative for users of the service.\n\nFor more detailed information on configuring endpoints and the importance of service contracts, you can refer to the documentation [here](https://wso2.com/choreo/docs/choreo-concepts/endpoint/)."}
{"question": "How does Choreo handle API management for endpoints? Can I manage each endpoint separately?", "answer": "Choreo provides a robust API management system that allows you to manage API endpoints effectively, including the capability to handle each endpoint separately. Hereâ€™s how Choreo handles API management for endpoints:\n\n### Endpoint Definition\nIn Choreo, an **endpoint** is a network-exposed function that resides within a component, such as a service or integration component. Each component can expose multiple endpoints, which can represent different entry points into that service. This includes various types such as REST APIs and GraphQL endpoints.\n\n### API Management Features\n1. **Service Contracts**: Each endpoint can be associated with a service contract (like OpenAPI or GraphQL SDL). If no contract is provided, Choreo defaults to exposing all HTTP verbs with a wildcard (`/*`).\n\n2. **Lifecycle and Security Management**: Choreo enables lifecycle management and security configurations on a per-endpoint basis. This means you can manage individual endpoints according to your needs, providing flexibility in how they are deployed and accessed.\n\n3. **Network Visibility**: The visibility of each endpoint can be configured to be project-specific, organization-specific, or public. This determines who can access the endpoint and how.\n\n4. **Expose Endpoints as Managed APIs**: For security and controlled access, endpoints can be exposed as managed APIs through the Choreo API Gateway. This feature allows you to utilize full lifecycle API management, API throttling, secure authorization flows, and analytics for each endpoint.\n\n5. **API Key Management**: Once an endpoint is exposed as a managed API, you can create and manage API keys for secure access. This management can be performed through the Choreo Developer Portal, where you can monitor and control API access effectively.\n\n### Conclusion\nIn summary, Choreo facilitates detailed API management for each endpoint, allowing you to customize security, lifecycle, and exposure settings individually. If you want to configure endpoints or learn more about API management features, you can refer to the following documentation:\n\n- [Configure Endpoints](https://wso2.com/choreo/docs/develop-components/configure-endpoints)\n- [Expose Endpoints as Managed APIs](https://wso2.com/choreo/docs/develop-components/configure-endpoints-body/#expose-endpoints-as-managed-apis)"}
{"question": "What kind of API management tasks can I perform for an individual endpoint in Choreo?", "answer": "In Choreo, you can perform several API management tasks for an individual endpoint. Hereâ€™s a comprehensive list of these tasks:\n\n1. **Lifecycle Management**: Manage the lifecycle of the API endpoint, which includes various states such as created, pre-released, published, blocked, deprecated, and retired. This helps ensure that subscribers have access to the latest and most reliable APIs.\n\n2. **Security Settings**: Configure security settings for the endpoint, which may include setting up role-based access control to restrict or allow certain users or roles to access the API.\n\n3. **Expose as Managed API**: You can expose the endpoint as a managed API by setting its network visibility to either Organization or Public. This allows the endpoint to be accessible through the Choreo API Gateway, enabling full lifecycle API management, API throttling, analytics, and monitoring.\n\n4. **API Key Management**: Generate and manage API keys for secure access to the endpoint. This includes actions such as regenerating or deleting API keys associated with the API.\n\nThese tasks enable effective management of APIs and ensure that they are secure, accessible, and optimized for subscribers.\n\nFor more detailed information, you can refer to the following documentation:\n- [Configure Endpoints](https://wso2.com/choreo/docs/develop-components/configure-endpoints)\n- [API Management Lifecycle](https://wso2.com/choreo/docs/api-management/lifecycle-management)\n- [Manage API Keys](https://wso2.com/choreo/docs/consuming-services/manage-api-keys/)\n- [Expose endpoints as managed APIs](https://wso2.com/choreo/docs/develop-components/configure-endpoints-body/#expose-endpoints-as-managed-apis)"}
{"question": "Where can I find more detailed instructions on configuring endpoints when developing components in Choreo?", "answer": "To configure endpoints while developing components in Choreo, you have a couple of options depending on the buildpack you are using.\n\n### Configuring Endpoints\n\n1. **Automatic Detection**:\n   - For `Ballerina` and `WSO2 MI` buildpacks, Choreo automatically detects the endpoint details for REST APIs.\n\n2. **Manual Configuration**:\n   - For other buildpacks (Java, Python, NodeJS, Ruby, PHP, Go, Dockerfile, etc.), you can configure endpoints in one of the following ways:\n   - **Using the Choreo Console**: If a `component.yaml` file is not present, you can define a basic endpoint configuration during component creation.\n   - **Using the `component.yaml` file**: You can manually configure endpoint details by defining them in a `component.yaml` file, which should be placed inside the `.choreo` directory at the build context path and committed to your source repository. This `component.yaml` file will take priority over other configurations.\n\n   - **Dynamic Parameters**: If you need to define dynamic endpoint parameters (like variable ports), you must use a `component.yaml` file, as automatic endpoint generation does not support such parameters.\n\n### Additional Endpoint Configuration File\n- Choreo also supports an `endpoints.yaml` file for defining multiple endpoint configurations. This file should be placed in the `.choreo` directory and includes necessary attributes such as version, name, port, type, network visibility, context, and schema file path for the endpoints.\n\n### Example Structure of `endpoints.yaml`\n```yaml\nversion: 0.1\nendpoints:\n- name: Your Service\n  port: 9090\n  type: REST\n  networkVisibility: Project\n  context: /your-service\n  schemaFilePath: your_service_openapi.yaml\n```\n\n### Documentation Links\nFor more detailed instructions on configuring endpoints, you can refer to the following documentation:\n- [Configure Endpoints](https://wso2.com/choreo/docs/develop-components/configure-endpoints/)\n- [Overview of the `component.yaml` file](https://wso2.com/choreo/docs/develop-components/manage-component-source-configurations#overview-of-the-componentyaml-file)\n- [Manage Component Source Configurations](https://wso2.com/choreo/docs/develop-components/manage-component-source-configurations/)\n\nThese resources provide comprehensive guidance on how to set up and manage your endpoint configurations effectively."}
{"question": "What are environments in Choreo and why are they used?", "answer": "In Choreo, environments serve as isolated deployment areas for your applications and components. Each project can utilize one or more environments, which helps manage and segregate the different stages of your application lifecycle, such as development, testing, and production.\n\n### Purpose of Environments:\n1. **Isolation**: Each environment is isolated, meaning services deployed in one environment cannot communicate with those in another. This ensures that changes in one environment do not affect others, which is particularly useful for testing new features without impacting production.\n\n2. **Configuration Management**: Environments allow you to maintain separate configuration values and secrets specific to each deployment stage. For instance, while promoting a component from development to production, you can override certain configuration values to suit the production environment.\n\n3. **Streamlined CI/CD**: Choreo supports a continuous integration and continuous deployment (CI/CD) process, enabling you to build your application once and deploy it across multiple environments. This means you can test your application in lower, non-production environments before promoting it to production.\n\n4. **Default Environments**: By default, Choreo provides two environmentsâ€”development and production. However, users in a private data plane can create and customize additional environments based on their specific needs.\n\n5. **Secure Storage**: All configurations and secrets stored at the environment level are encrypted and managed securely, ensuring that sensitive information is protected.\n\n### Diagram of Component Promotion Across Environments\n![Choreo environments](https://wso2.com/choreo/docs/assets/img/choreo-concepts/choreo-environments.png)\n\nFor more detailed information, you can refer to the documentation on [Environments in Choreo](https://wso2.com/choreo/docs/choreo-concepts/environments/) and [CI/CD in Choreo](https://wso2.com/choreo/docs/choreo-concepts/ci-cd/)."}
{"question": "What environments does Choreo provide by default?", "answer": "Choreo provides two default environments for deploying services and managing APIs within the Choreo cloud data plane:\n\n1. **Development**: This environment is typically used for testing and development purposes. It allows developers to build and test their applications in a controlled setting before moving to production.\n\n2. **Production**: This environment is used for deploying live applications that are accessible to end-users. It is essential to ensure that all components are thoroughly tested in the development environment before being promoted to production.\n\nIn addition to these default environments, if you are operating within a private data plane organization, you have the flexibility to create and customize multiple environments based on your specific requirements.\n\nFor more details, you can refer to the documentation on [Choreo Environments](https://wso2.com/choreo/docs/choreo-concepts/environments/)."}
{"question": "Can different projects in Choreo use a customized set of environments?", "answer": "Yes, different projects in Choreo can utilize a customized set of environments. By default, all projects are provisioned with two standard environments: development and production. However, each project can be configured to use one or more environments available within the organization. For example, one project may use development, staging, and production environments while another may only utilize development and production environments.\n\nAdditionally, in Choreo, you can create additional environments if you are using a private data plane organization, which allows for a more tailored setup based on your specific needs. This flexibility enables projects to have distinct environments according to their requirements, promoting components across these environments as needed.\n\nFor more detailed information, you can refer to the following documentation:\n- [Manage Continuous Deployment Pipelines](https://wso2.com/choreo/docs/devops-and-ci-cd/manage-continuous-deployment-pipelines/)\n- [Environments](https://wso2.com/choreo/docs/choreo-concepts/environments/)\n- [CI/CD](https://wso2.com/choreo/docs/choreo-concepts/ci-cd/)"}
{"question": "How do I move my application components between different environments in Choreo?", "answer": "In Choreo, moving or migrating application components between different environments is achieved through a process known as promotion. Hereâ€™s a comprehensive overview of how to manage this process:\n\n1. **Understanding Environments**: Choreo provides isolated environments for each project, which can include development, staging, and production. Each environment is designed to have restricted network and resource access, ensuring that services in one environment cannot communicate with services in another.\n\n2. **Build Once, Deploy Many Strategy**: When you create a component, it is built once per commit (if automatic builds are enabled) or based on a selected commit during manual builds. After building, you can promote this component to other environments as needed. This allows for testing in lower environments (like development) before moving to production.\n\n3. **Environment-Specific Configurations**: When promoting a component, you have the option to override its configuration values with environment-specific values. This means you can customize the behavior of the component for each environment it is deployed in.\n\n4. **Promotion Process**:\n   - You start by deploying the component to the initial environment, typically development.\n   - Once the component is successfully deployed and tested, you can promote it to the next environment (e.g., staging or production).\n   - To promote a component, navigate to the relevant section in the Choreo console where you can manage deployments and trigger the promotion.\n\n5. **Configuration Management**: You can define both environment-independent and environment-specific configurations. \n   - **Environment-independent configurations**: These are applicable across all environments and can be modified from the Deploy page of the component.\n   - **Environment-specific configurations**: These are tailored for each environment and can also be modified from the Deploy page.\n\nBy following this process, you can efficiently manage the movement of your application components across various environments in Choreo.\n\nFor more detailed information, you can refer to the following documentation:\n- [CI/CD](https://wso2.com/choreo/docs/choreo-concepts/ci-cd/)\n- [Manage Environments](https://wso2.com/choreo/docs/devops-and-ci-cd/manage-environments/)\n- [Resource Hierarchy](https://wso2.com/choreo/docs/choreo-concepts/resource-hierarchy/#components-and-environments)"}
{"question": "Is it possible to have different configurations for the same component across different environments?", "answer": "Yes, Choreo supports different configurations for the same component across different environments, such as development, testing, and production. \n\n### Environment Management in Choreo\nChoreo provides developers with one or more environments to run their applications. By default, it offers development and production environments, but you can also create additional environments based on your requirements. Each project in Choreo can utilize different environments, allowing for flexible deployment strategies.\n\n### Configuration Options\n1. **Environment-independent Configurations**: These settings apply uniformly across all environments. You can make changes to these configurations on the **Deploy** page of the component and then trigger a new deployment to the initial environment before promoting it to higher environments.\n\n2. **Environment-specific Configurations**: These settings are tailored for specific environments. To modify them, navigate to the **Deploy** page of the component, make the necessary changes via the specific environment card, and trigger a new deployment.\n\n3. **Configuration Groups**: Choreo also allows you to create Configuration Groups, which are collections of key-value pairs. These groups can be defined at the organization level and linked to components at deployment time. By using configuration groups, you can efficiently manage reusable configurations across different environments, ensuring consistency and simplifying the management of configurations.\n\n### Security\nAll configurations and secrets are encrypted and stored in environment-specific key vaults, which enhances security and ensures that sensitive information is handled appropriately.\n\nFor more detailed information about managing configurations in Choreo, you can refer to the following documentation links:\n- [Environments](https://wso2.com/choreo/docs/choreo-concepts/environments/)\n- [Configurations](https://wso2.com/choreo/docs/choreo-concepts/ci-cd/#configurations)\n- [Manage Configuration Groups](https://wso2.com/choreo/docs/devops-and-ci-cd/manage-configuration-groups/)"}
{"question": "What is an organization in Choreo and why is it important for new users?", "answer": "An organization in Choreo is essentially a logical grouping of users and user resources. For new users, creating an organization is a crucial first step upon signing into Choreo. Here are the key points regarding organizations and their importance:\n\n1. **Creation Requirement**: First-time users are required to create an organization and become a member of it when they sign in to Choreo. This is a necessary step to start using the platform effectively.\n\n2. **Resource Access**: Users and resources within an organization cannot access resources from another organization unless they are invited and added as members by an admin of that other organization. This ensures that resources are securely managed and shared only among authorized users.\n\n3. **Single Organization Limitation**: Each user can create and belong to only one organization. This limitation emphasizes the importance of organizing resources and users effectively from the outset.\n\nCreating an organization helps in managing your resources, collaborating with team members, and ensuring that the access to those resources is controlled and secure.\n\nFor more details, you can refer to the documentation on organizations [here](https://wso2.com/choreo/docs/choreo-concepts/organization/)."}
{"question": "Can I create more than one organization in Choreo, or join multiple organizations?", "answer": "In Choreo, a user cannot create more than one organization. When a first-time user signs in to Choreo, they must create one organization and become a member of it. However, if a user is a member of multiple organizations, they can switch between these organizations using the Organization list in the Choreo Console header.\n\nTo summarize:\n- **Creating Organizations**: A user can only create one organization.\n- **Joining Organizations**: A user can join multiple organizations, but they need to be invited and added as a member by an admin of those organizations.\n\nFor more detailed information about organizations in Choreo, you can refer to the documentation [here](https://wso2.com/choreo/docs/choreo-concepts/organization/)."}
{"question": "How do I switch between different organizations if I'm a member of more than one?", "answer": "To switch between different organizations in Choreo when you are a member of more than one organization, follow these steps:\n\n1. Look at the header of the Choreo Console.\n2. Find the **Organization** list.\n3. Click on it and select the organization you wish to switch to from the list provided.\n\nThis will allow you to change your active organization to the one you selected, enabling you to manage resources and projects associated with that organization.\n\nFor more detailed information, you can refer to the documentation [here](https://wso2.com/choreo/docs/choreo-concepts/organization/#switch-organizations)."}
{"question": "How does Choreo manage user permissions?", "answer": "Choreo manages user permissions and access control through a structured system that utilizes **Groups**, **Roles**, and a **Mapping level**. Hereâ€™s a detailed explanation of how this works:\n\n### Groups\nA group in Choreo is essentially a collection of users that can be assigned specific roles. Users within a group inherit the permissions associated with the roles assigned to that group. For example, if a user is part of the `API Publisher` group, they will automatically obtain the permissions associated with the API Publisher role.\n\nChoreo has predefined groups with specific roles, including:\n- **API Publisher**: Users who can create, publish, delete, and manage APIs.\n- **API Subscriber**: Developers who can manage subscriptions and generate API keys.\n- **Admin**: Users responsible for administration tasks including user management and project management.\n- **Billing Admin**: Users who manage billing and subscriptions.\n- **Choreo DevOps**: Users who manage deployment and monitor components.\n- **Developer**: Users who develop and manage applications.\n- **External API Subscriber**: API consumers with limited access to the Developer Portal.\n\n### Roles\nRoles in Choreo define the permissions associated with different user actions. Some key roles include:\n- **API Publisher**: Can manage APIs.\n- **API Subscriber**: Can manage subscriptions and applications.\n- **Admin**: Has full administrative rights.\n- **Developer**: Can develop and manage applications.\n\n### Access Control\nChoreo employs a mapping level for access control:\n- **Organization Level**: Assigning a role to a group at the organization level grants that group permissions across all organizational resources. \n- **Project Level**: Assigning a role to a group at the project level restricts permissions to that specific project.\n\nThis hierarchical structure allows for precise control over what users can do based on their roles and the context of the projects they are involved in.\n\n### Important Considerations\n- It is recommended to assign only one role to a user across projects or levels to avoid unintended access. \n- Organization-level permissions take precedence over project-level permissions, meaning that a user with organization-level access can perform actions across all projects within that organization.\n\nFor a visual aid on how access control is structured, you can refer to the diagram provided in the documentation.\n\nFor detailed steps on managing user permissions and access control, you can check the following links:\n- [Manage user permission](https://wso2.com/choreo/docs/choreo-concepts/organization/#manage-user-permission)\n- [Control Access in the Choreo Console](https://wso2.com/choreo/docs/administer/control-access-in-the-choreo-console/)"}
{"question": "What is a group in Choreo, and how do users inherit permissions from them?", "answer": "In Choreo, a **group** is defined as a collection of users who are assigned one or more roles. These roles dictate the permissions that users within the group inherit. This means that when a user is added to a group, they automatically receive the permissions associated with the roles assigned to that group. For example, if a user is part of the `API Publisher` group, they will inherit the capabilities of the `API Publisher` role.\n\nChoreo includes several predefined groups, each configured with specific roles, such as:\n- **API Publisher**: Users can create, publish, and manage APIs.\n- **API Subscriber**: Users can manage subscriptions and generate API keys.\n- **Admin**: Users handle all administrative tasks, including user management and project oversight.\n- **Billing Admin**: Users manage billing-related tasks.\n- **Choreo DevOps**: Users manage deployments and monitor components.\n- **Developer**: Users develop and manage cloud-native applications.\n- **External API Subscriber**: Users consume APIs without broader access.\n\nWhen creating a new group, it's important to assign a role to ensure that users within that group have the necessary permissions. \n\n### Permission Inheritance\nUsers inherit permissions based on the role assigned to their group as follows:\n- If a role is assigned at the **organization level**, users inherit those permissions across all resources within the organization.\n- If a role is assigned at the **project level**, users inherit permissions only within the context of that specific project.\n\nFor example, if a user has `edit_project` permissions assigned at the organization level, they can edit all projects within that organization. Conversely, if the same permission is assigned at the project level, the user can only edit that specific project.\n\nIt is advisable to avoid assigning multiple roles to a single user across different projects or levels to prevent unintended access.\n\nFor further details, you can refer to the documentation on [Managing User Permissions](https://wso2.com/choreo/docs/choreo-concepts/organization/#manage-user-permission) and [Controlling Access in the Choreo Console](https://wso2.com/choreo/docs/administer/control-access-in-the-choreo-console/)."}
{"question": "What are the predefined user groups available in Choreo?", "answer": "In Choreo, several predefined user groups are available, each associated with specific roles and permissions. Hereâ€™s a summary of those groups and their respective roles:\n\n### Predefined User Groups and Their Roles\n\n1. **API Publisher**\n   - **Role**: API Publisher\n   - **Permissions**: Can discover, create, publish, delete, test, and manage APIs.\n\n2. **API Subscriber**\n   - **Role**: API Subscriber\n   - **Permissions**: Can subscribe to applications, manage subscriptions, manage applications, generate API keys, and manage API keys.\n\n3. **Admin**\n   - **Role**: Admin\n   - **Permissions**: Responsible for all administration tasks, including user management, customizing the Developer Portal, managing projects, enabling analytics, managing domains, etc.\n\n4. **Billing Admin**\n   - **Role**: Billing Admin\n   - **Permissions**: Responsible for billing administration, including viewing tiers, creating and viewing organizations, managing invoices, and managing subscriptions.\n\n5. **Choreo DevOps**\n   - **Role**: Choreo DevOps\n   - **Permissions**: Provides access to the Choreo DevOps portal for actively managing, ensuring dependable deployment, and monitoring components.\n\n6. **Developer**\n   - **Role**: Developer\n   - **Permissions**: Can develop, deploy, and manage cloud-native applications at scale.\n\n7. **External API Subscriber**\n   - **Role**: External API Subscriber\n   - **Permissions**: API consumers with access only to the API Developer Portal, allowing them to join organizations solely for the purpose of consuming APIs.\n\n### Important Notes\n- Users inherit the permissions associated with the roles assigned to their respective groups. For example, if a user is added to the **API Publisher** group, they automatically receive the **API Publisher** role and its associated permissions.\n- When creating a new group, be sure to assign a role to ensure that users have the required permissions.\n\nFor more detailed information, you can refer to the official documentation [here](https://wso2.com/choreo/docs/choreo-concepts/organization/#manage-user-permission)."}
{"question": "Can you describe the different roles in Choreo and what each role allows a user to do?", "answer": "In Choreo, user permissions are managed through predefined roles, which can be assigned to groups of users. Each role comes with specific permissions and capabilities. Below are the different roles available in Choreo along with their associated permissions and capabilities:\n\n1. **API Publisher**:\n   - Can discover, create, publish, delete, test, and manage APIs.\n\n2. **API Subscriber**:\n   - A developer within an organization who can subscribe to applications, manage subscriptions, manage applications, generate API keys, and manage API keys.\n\n3. **Admin**:\n   - Responsible for all administration tasks, including user management, customizing the Developer Portal, managing projects, enabling analytics, and managing domains.\n\n4. **Billing Admin**:\n   - Handles billing administration, which includes viewing tiers, creating and viewing organizations, managing invoices, and overseeing subscriptions and payment methods.\n\n5. **Choreo DevOps**:\n   - Has access to the Choreo DevOps portal, enabling management, dependable deployment, and monitoring of components.\n\n6. **Developer**:\n   - Focuses on developing, deploying, and managing cloud-native applications at scale.\n\n7. **External API Subscriber**:\n   - An API consumer who has access only to the API Developer Portal, allowing them to join an organization solely for consuming APIs.\n\n8. **Environment Manager (Deprecated)**:\n   - Previously managed deployment environments.\n\n### Groups\nChoreo also utilizes groups to facilitate permission management. A group is a collection of users assigned one or more roles. Users in a group inherit the permissions associated with the roles assigned to that group. For example, if a user is part of the `API Publisher` group, they will automatically receive the `API Publisher` role and its associated permissions.\n\n### Access Control\nAccess control in Choreo is managed through a combination of roles, groups, and mapping levels (organization and project). This structure ensures that permissions are appropriately assigned and inherited across users and projects.\n\nFor more detailed information about managing user permissions and the specific capabilities of each role, you can refer to the following documentation:\n- [Manage user permission](https://wso2.com/choreo/docs/choreo-concepts/organization/#manage-user-permission)\n- [Control Access in the Choreo Console](https://wso2.com/choreo/docs/administer/control-access-in-the-choreo-console/)"}
{"question": "What is the relationship between the 'Choreo DevOps' and 'Choreo Platform Engineer' roles?", "answer": "In the Choreo platform, the roles of 'Choreo DevOps' and 'Choreo Platform Engineer' are crucial for managing and deploying cloud-native applications, but they have distinct functions.\n\n### Choreo DevOps Role\n- **Primary Focus**: The Choreo DevOps role is primarily responsible for managing the deployment of components and ensuring reliable operations. Users in this role have access to the Choreo DevOps portal, which allows them to actively monitor and manage various components within the platform.\n- **Key Responsibilities**:\n  - Ensuring dependable deployment of applications.\n  - Monitoring the health and performance of deployed components.\n  - Managing environments and configurations to optimize application delivery.\n\n### Choreo Platform Engineer Role\n- **Primary Focus**: The Choreo Platform Engineer role typically involves creating and managing environments. This role is more technical and may include tasks such as setting up infrastructure and monitoring systems.\n- **Key Responsibilities**:\n  - Creating new environments for application deployment.\n  - Managing configurations and settings specific to the infrastructure.\n  - Collaborating with the DevOps team to ensure smooth transitions from development to production.\n\n### Relationship between the Two Roles\n- **Collaboration**: Both roles work closely together to facilitate the development and deployment process. While the Choreo DevOps role focuses on operational management and deployment assurance, the Choreo Platform Engineer is more involved in the technical setup and environment management.\n- **Shared Permissions**: Both roles are granted specific permissions that allow them to carry out their responsibilities effectively. For instance, both roles have the `ENVIRONMENT-MANAGEMENT` permission, enabling them to create and manage deployment environments.\n\nIn summary, while both roles are integral to the Choreo platform, the Choreo DevOps role emphasizes operational management, and the Choreo Platform Engineer role focuses on the technical aspects of environment and infrastructure setup.\n\nFor more detailed information on user permissions and roles in Choreo, you can refer to the [Manage user permission](https://wso2.com/choreo/docs/choreo-concepts/organization/#manage-user-permission) documentation."}
{"question": "How can I find my organization's unique ID in Choreo?", "answer": "To find your organization's unique ID in Choreo, follow these steps:\n\n1. Click on the **Organization** list located in the header and select your organization.\n2. In the left navigation menu, click on **Settings**.\n3. In the header, click on the **Organization** list again. This action will open the organization-level settings page.\n4. Under the **Organization** section, you will see an option labeled **Copy ID**. Click on this to copy your organization's unique ID.\n\nThis unique ID serves as a distinct identifier for your organization within the Choreo platform.\n\nFor additional details, you can refer to the documentation [here](https://wso2.com/choreo/docs/choreo-concepts/organization/#organization-id)."}
{"question": "Where can I find my organization's handle in Choreo?", "answer": "To locate your organization's handle in the Choreo Console, follow these steps:\n\n1. Click on the **Organization** list in the header.\n2. Select your organization from the list.\n3. In the left navigation, click on **Settings**.\n4. Under the **Organization** section, you will find an option to **Copy Handle**. This allows you to copy your organization's handle directly.\n\nThe organization handle is a unique string that corresponds to your organization's name.\n\nFor more detailed information, you can refer to the documentation [here](https://wso2.com/choreo/docs/choreo-concepts/organization/#organization-handle)."}
{"question": "What exactly is a 'project' in Choreo?", "answer": "In Choreo, a **project** is defined as a logical group of related components that typically represent a single cloud-native application. Its key characteristics include:\n\n- **Composition**: A project can consist of one or more components. These components can ideally be stored in a single GitHub repository, organized under different paths, which is referred to as a monorepo architecture.\n\n- **Deployment**: At deployment time, all components within a project are deployed into a single namespace in a Kubernetes cluster. This allows for streamlined management and deployment of the related components.\n\n- **Exposure**: Components within a project can be exposed in different waysâ€”publicly to the internet, internally to the organization, or privately within the project itself.\n\n- **Architecture Representation**: A project is represented as a cell in the cell-based architecture of Choreo. \n\n### Components of a Project\nEach **component** within a project serves as a unit of work in the application. Common types of components include:\n- Microservices\n- APIs\n- Jobs/Tasks\n\nEach component is linked to a specific directory in a Git repository, containing either the program's source code or a Dockerfile with build instructions. Components can be independently deployed, managed, and scaled, and they map to individual pods in the Kubernetes environment upon deployment.\n\n### Purpose\nThe primary purpose of a project in Choreo is to organize and manage related components effectively, enabling users to build, deploy, and maintain cloud-native applications.\n\nFor more details about projects and components in Choreo, you can refer to the following documentation links: \n- [Project](https://wso2.com/choreo/docs/choreo-concepts/project/)\n- [Component](https://wso2.com/choreo/docs/choreo-concepts/component/)"}
{"question": "How many components can be included in a Choreo project?", "answer": "The provided documentation does not specify a maximum number of components allowed in a Choreo project. It outlines that a project is a logical grouping of related components and can consist of one or more components, but there is no mention of a limit.\n\nFor further information, you can refer to the Choreo documentation on [Projects](https://wso2.com/choreo/docs/choreo-concepts/project/). If you have more specific inquiries, feel free to ask!"}
{"question": "Can I use a single GitHub repository for all components within a Choreo project?", "answer": "Yes, a single GitHub repository can be used for all components within a Choreo project. This setup is often referred to as a \"monorepo\" architecture, where multiple components are stored in a single repository under different paths.\n\n### Configuration Steps\n\n1. **Connect Your GitHub Repository**: \n   To use a single GitHub repository for all components, you need to connect the repository to your Choreo project. This involves authorizing the Choreo Apps GitHub application to access your repository.\n\n2. **Create Components**:\n   When creating components in Choreo, you specify the **Component Directory** for each component, which determines where in the repository's structure the component's source code resides. You can set different paths for different components within the same repository.\n\n3. **Component Deployment**:\n   At deployment time, all components within the project will be deployed into a single Kubernetes namespace. This means you can manage and deploy them collectively while still keeping their code organized in a single repository.\n\n4. **Accessing the Repository**:\n   You'll need to grant the necessary permissions to Choreo to read from and write to your GitHub repository. This is essential for tasks such as pulling updates and deploying changes.\n\n### Example Structure\nIf you have a repository structured as follows:\n```\n/my-repo\n    /component1\n        (source code for component 1)\n    /component2\n        (source code for component 2)\n```\nYou can configure both components within Choreo to point to their respective directories.\n\nFor detailed steps on connecting your repository and creating components, you can refer to the following documentation: [Choreo Project Documentation](https://wso2.com/choreo/docs/choreo-concepts/project/) and [Develop Components with Git](https://wso2.com/choreo/docs/develop-components/develop-components-with-git/)."}
{"question": "Where are the components of a Choreo project deployed in a Kubernetes cluster?", "answer": "The components of a Choreo project are deployed within a Kubernetes cluster in a specific way. When you deploy a project in Choreo, all components associated with that project are deployed into a single namespace of the Kubernetes cluster. This means that each component operates within a designated area, allowing for organization and isolation of resources.\n\nEach component itself is represented as a single unit of work, such as a microservice or API, and maps to a single pod in the Kubernetes cluster. This allows for independent management and scaling of each component. \n\nTo summarize:\n- **Deployment Location**: All components of a project are deployed into a single namespace in the Kubernetes cluster.\n- **Component Representation**: Each component corresponds to a single pod within that namespace.\n\nFor further details, you can refer to the following documentation:\n- [Project Documentation](https://wso2.com/choreo/docs/choreo-concepts/project/)\n- [Component Documentation](https://wso2.com/choreo/docs/choreo-concepts/component/)"}
{"question": "What are the different ways components within a Choreo project can be exposed?", "answer": "In Choreo, components within a project can be exposed in several ways, depending on their intended use and audience. Here are the different methods to expose components:\n\n1. **Public Exposure**: Components can be exposed to the public internet, allowing external users or applications to access them. This is useful for APIs or services that need to be available to a wide audience.\n\n2. **Internal Exposure**: Components can be made available internally within the organization. This method is suitable for services or applications that should only be accessed by users or systems within the same organization.\n\n3. **Private Exposure**: Components can also be restricted to be accessible only within the project itself. This is ideal for internal components that do not need to be exposed to either the public internet or other internal systems.\n\nEach of these exposure methods allows you to manage how your components interact with users or other systems, providing flexibility based on security and accessibility needs.\n\nFor more details, you can refer to the [Project documentation](https://wso2.com/choreo/docs/choreo-concepts/project/) which elaborates on the structure and exposure of components within a Choreo project."}
{"question": "Does a Choreo project align with any specific architectural pattern?", "answer": "A Choreo project serves as a logical grouping of related components, which typically aligns with a cloud-native application architecture. Each project can contain one or more components, and they can be organized within a single GitHub repository, a structure often referred to as the **monorepo architecture**. \n\nAdditionally, Choreo projects are represented as **cells** in a **cell-based architecture**, allowing for runtime isolation through namespaces during deployment. This means that all components within a project are deployed into a single namespace within the Kubernetes cluster, enhancing organizational efficiency and governance.\n\nIn summary, a Choreo project aligns closely with the monorepo architectural pattern and the cell-based architecture, emphasizing the organization, deployment, and management of related components in a cohesive manner.\n\nFor more detailed information, you can refer to the [Choreo Project Documentation](https://wso2.com/choreo/docs/choreo-concepts/project/)."}
{"question": "How are data planes structured and shared within Choreo?", "answer": "Choreo's architecture consists of two main components: the control plane and the data plane. Here's a detailed explanation of the structure and sharing mechanism of data planes within Choreo:\n\n### Structure of Data Planes\n\n1. **Control Plane**: \n   - The control plane is responsible for managing organizations, users, projects, and the overall application development journey, including deployment and governance.\n\n2. **Data Plane**:\n   - The data plane is where user applications are deployed based on configurations set in the control plane. It supports various application types, including services, web applications, APIs, integrations, and scheduled tasks. \n   - Traffic related to the runtime of these applications is contained within the data plane, ensuring that user data remains secure.\n\n3. **Types of Data Planes**:\n   - **Cloud Data Planes**: Utilize a multi-tenanted infrastructure model, allowing multiple users to share a secure environment for application runtime.\n   - **Private Data Planes (PDPs)**: Offer dedicated infrastructure for a single organization, enhancing privacy and control over application deployments.\n\n### Sharing Mechanism\n\n- **Connectivity**:\n  - The private data plane communicates with the control plane for various activities. All communications are outbound from the private data plane, which means there is no need to configure specific inbound traffic for these interactions. However, if outbound traffic is restricted, organizations must allow traffic to the public IP range of the control plane.\n\n- **Management Models**:\n  - Choreo offers several management models for private data planes, enabling collaboration between WSO2 and customers:\n    - WSO2 fully managed (infrastructure and PDP in WSO2 subscription)\n    - WSO2 fully managed (infrastructure and PDP in customer subscription)\n    - Customer self-managed (installation script and updates provided by WSO2)\n\n- **Data Privacy and Compliance**:\n  - Logs and observability data are retained within the data plane, supporting data locality and compliance with regulations such as GDPR. This approach minimizes data exposure points and ensures that users have transparency and control over their data.\n\n- **Resource Hierarchy**:\n  - Data planes are connected to organizations and are available for all projects within that organization. When an environment is created in a project, it is linked to the data plane associated with the organization, which is reflected in a Kubernetes namespace.\n\n### Summary\n\nIn summary, Choreo's data planes are designed to provide secure, efficient runtime environments for user applications, with distinct types of data planes catering to different organizational needs. The sharing mechanism ensures that organizations can manage and deploy their applications while maintaining control and compliance with data privacy regulations.\n\nFor more detailed information about data planes in Choreo, you can refer to the following documentation links:\n- [Data Planes](https://wso2.com/choreo/docs/choreo-concepts/data-planes/)\n- [Private Data Plane Management Models](https://wso2.com/choreo/docs/references/private-data-plane-management-models/)\n- [Resource Hierarchy](https://wso2.com/choreo/docs/choreo-concepts/resource-hierarchy/#organizations-and-data-planes)"}
{"question": "Can I associate multiple Kubernetes clusters with a single environment in Choreo, and why would I do that?", "answer": "Yes, you can associate multiple Kubernetes clusters with a single environment in Choreo. This capability allows you to build highly resilient and resource-efficient solutions by utilizing multiple clusters. \n\n### Benefits of Associating Multiple Kubernetes Clusters:\n1. **Resilience**: By using multiple clusters, you can enhance the availability of your applications. If one cluster experiences issues, the others can continue to serve traffic.\n   \n2. **Resource Efficiency**: Distributing workloads across multiple clusters can optimize resource usage and ensure that your applications can scale effectively based on demand.\n\n3. **Simplified Multi-Cluster Deployment**: Choreo allows you to synchronize applications and workloads between the associated clusters within an environment, enabling multi-cluster deployments with a single click.\n\n4. **Increased Flexibility**: You can tailor your application architecture to suit specific needs, such as separating different environments (development, staging, production) across clusters.\n\n5. **Centralized Management**: Managing multiple clusters under a single environment simplifies operations and monitoring, making it easier to maintain and update your applications.\n\nThe diagram below illustrates how multiple clusters can associate with different environments:\n\n![Environments and dataplanes](https://wso2.com/choreo/docs/assets/img/choreo-concepts/environments-and-dataplanes.png)\n\nFor further details, you can refer to the documentation [here](https://wso2.com/choreo/docs/choreo-concepts/resource-hierarchy/#environments-and-data-planes)."}
{"question": "How does Choreo facilitate multi-cluster deployments for my applications?", "answer": "Choreo facilitates multi-cluster deployments for applications through a well-structured architecture that allows multiple Kubernetes clusters to be associated with a single environment. This capability enables organizations to build highly resilient and resource-efficient solutions by synchronizing applications and workloads across these associated clusters.\n\nHere's how Choreo supports multi-cluster deployments:\n\n1. **Multiple Cluster Association**: You can associate multiple Kubernetes clusters with a single environment, allowing for the deployment of applications across various clusters. This setup is beneficial for creating a robust deployment architecture that can handle different workloads efficiently.\n\n2. **Single Click Deployment**: Choreo simplifies the deployment process by allowing you to perform multi-cluster deployments with just a single click. This reduces the complexity involved in deploying applications across multiple clusters and enhances operational efficiency.\n\n3. **Environment and Data Plane Management**: Each environment can consist of multiple clusters, and Choreo provides the flexibility to create multiple environments on the same cluster if needed. This means you can tailor your application architecture to fit specific requirements without being constrained to a single deployment model.\n\n4. **CI/CD Integration**: Choreo adopts a \"build once, deploy many\" strategy that allows applications to be built once and then promoted to different environments, including multiple clusters. This integration ensures that the deployment process is streamlined and efficient, minimizing the need for repetitive builds.\n\n5. **Configuration Management**: Choreo centralizes configuration parameters, secrets, and credentials at the environment level, allowing for secure and efficient management of application settings across multiple clusters.\n\nThe following diagram illustrates how multiple clusters can be associated with different environments:\n\n![Environments and dataplanes](https://wso2.com/choreo/docs/assets/img/choreo-concepts/environments-and-dataplanes.png)\n\nFor more detailed information, you can refer to the relevant documentation on [Environments and Data Planes](https://wso2.com/choreo/docs/choreo-concepts/resource-hierarchy/#environments-and-data-planes) and [CI/CD](https://wso2.com/choreo/docs/choreo-concepts/ci-cd/)."}
{"question": "Is it mandatory to use a separate Kubernetes cluster for each environment I create?", "answer": "No, it is not mandatory to use separate Kubernetes clusters for each environment when using Choreo. You have the flexibility to create multiple environments on the same cluster. Choreo allows you to associate multiple Kubernetes clusters with a single environment, enabling you to build resilient and resource-efficient solutions.\n\nThe architecture of your application may dictate a different configuration, but you can effectively utilize a single cluster for different environments, such as development, staging, and production. This means you can promote components across these environments without necessarily needing separate clusters.\n\nFor more detailed information, you can refer to the following documentation: [Environments and Data Planes](https://wso2.com/choreo/docs/choreo-concepts/resource-hierarchy/#environments-and-data-planes)."}
{"question": "Where do components reside within the Choreo project structure?", "answer": "In Choreo, components reside within a project structure, which is a logical grouping of related components that typically represent a single cloud-native application. Hereâ€™s how it works:\n\n1. **Project Structure**: A project can consist of one or more components, which can ideally be located in a single GitHub repository under different paths. This approach is known as the monorepo architecture.\n\n2. **Deployment**: At deployment time, all components within a project are deployed into a single namespace of the Kubernetes cluster. This means that they can be managed and scaled as a unit, yet each component can also be deployed, managed, and scaled independently.\n\n3. **Component Types**: Each component represents a single unit of work, such as a microservice, API, or job/task. Components are associated with specific directory paths in a Git repository, which contain either the program source code or a Dockerfile with build instructions.\n\n4. **Environment Association**: Components belong to environments that are provisioned per project. When deployed, they exist within the specified environment, allowing for promotion across various environments as needed.\n\n5. **Access**: Components can be exposed publicly, internally within the organization, or kept private within the project, depending on the requirements.\n\nFor more detailed information on the project structure and components, you can refer to the following documentation links:\n- [Choreo Projects](https://wso2.com/choreo/docs/choreo-concepts/project/)\n- [Components and Environments](https://wso2.com/choreo/docs/choreo-concepts/resource-hierarchy/#components-and-environments)"}
{"question": "How do I deploy a component to an environment in Choreo?", "answer": "To deploy a component to an environment in Choreo, follow these steps:\n\n1. **Create and Build Your Component**: Ensure that you have a component created and built in your Choreo project.\n\n2. **Deploy the Component**:\n   - Navigate to the **Deploy** page of your component in the Choreo Console.\n   - You can deploy the component in two ways:\n     - **Manual Deployment**: Go to the **Set Up** card and click on **Deploy** to manually initiate the deployment.\n     - **Automatic Deployment**: If you want the component to automatically deploy on build, enable the **Auto Deploy on Build** option in the **Set Up** card. Note that this feature requires **Auto Build on Commit** to be enabled.\n\n3. **Environment-Specific Configurations**: If your component requires specific configurations for the target environment, make sure to set those in the **Deploy** page under the relevant environment card before triggering the deployment.\n\n4. **Promote to Higher Environments**: If you want to promote the component to a higher environment (e.g., from development to production), you must request an approval if the environment is critical. This involves:\n   - Clicking on your component in the **Component Listing** pane.\n   - Going to the **Deploy** section and selecting the **Development** card to request a promotion.\n\n5. **Redeploying if Necessary**: If you need to reapply configurations or restart the running instances of your component, you can do so by clicking on **Redeploy Release** on the **Runtime** page.\n\nOnce the deployment is complete, the component will be running in the specified environment, and you can manage it further from the Choreo Console.\n\nFor more detailed information, you can check the following sections in the documentation:\n- [Components and environments](https://wso2.com/choreo/docs/choreo-concepts/resource-hierarchy/#components-and-environments)\n- [Request approval for environment promotion](https://wso2.com/choreo/docs/develop-components/submit-and-manage-workflow-approval-requests/#request-approval-for-environment-promotion)\n- [Redeploy a release](https://wso2.com/choreo/docs/devops-and-ci-cd/view-runtime-details/#redeploy-a-release)\n- [Deployment](https://wso2.com/choreo/docs/choreo-concepts/ci-cd/#deployment)"}
{"question": "After deploying a component, can I promote its image to other environments?", "answer": "Yes, a deployed component's image can be promoted to other environments in Choreo. Here's how you can do it:\n\n### Steps to Promote a Deployed Component's Image\n\n1. **Component Creation and Deployment**:\n   - Ensure that you have a component created, built, and initially deployed to the development environment.\n\n2. **Approval Workflow**:\n   - Make sure an approval workflow is configured for environment promotion, especially if you are promoting the component to critical environments like production.\n\n3. **Requesting Promotion**:\n   - In the Choreo Console, navigate to the **Component Listing** pane and select the component you want to promote. This will take you to the **Overview** page of that component.\n   - Click on the **Deploy** option in the left navigation menu.\n   - Locate the **Development** card and click on **Request to Promote**.\n   - A **Request Approval** pane will open where you can enter the request details. After filling it out, click **Submit**. This will notify all authorized personnel about the request for promotion.\n\n4. **Approval Process**:\n   - Once the request is submitted, it will be pending review. During this time, other developers are restricted from making the same request until the current request is either approved or rejected.\n   - When an authorized assignee approves your request, you will receive a confirmation email, allowing you to proceed with promoting the component to the intended environment.\n\n5. **Environment Specifications**:\n   - When promoting, you can also override configuration values with environment-specific values.\n\n### Additional Information\n- Choreo provides multiple environments (e.g., development and production) for projects, and components can be promoted across these environments.\n- The initial deployment typically happens in the first environment, and subsequent promotions can be performed to higher environments.\n\nFor more detailed instructions, you can refer to the following documentation:\n\n- [Request approval for environment promotion](https://wso2.com/choreo/docs/develop-components/submit-and-manage-workflow-approval-requests/#request-approval-for-environment-promotion)\n- [Components and environments](https://wso2.com/choreo/docs/choreo-concepts/resource-hierarchy/#components-and-environments)\n- [Manage Environments](https://wso2.com/choreo/docs/devops-and-ci-cd/manage-environments/)"}
